<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.6.1" created="2016-10-15 13:20" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Minicurso de Lógica de Programação</title>
	<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao</link>
	<description>Just another WordPress site</description>
	<pubDate>Sat, 15 Oct 2016 13:20:10 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao</wp:base_site_url>
	<wp:base_blog_url>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[gustavo.foa]]></wp:author_login><wp:author_email><![CDATA[gustavo.foa@gmail.com]]></wp:author_email><wp:author_display_name><![CDATA[gustavo.foa]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

	<wp:category>
		<wp:term_id>1</wp:term_id>
		<wp:category_nicename><![CDATA[uncategorized]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
	</wp:category>
	<wp:term>
		<wp:term_id><![CDATA[1]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[uncategorized]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Uncategorized]]></wp:term_name>
	</wp:term>

	<generator>https://wordpress.org/?v=4.6.1</generator>

	<item>
		<title>gustavo-furtado</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-1-porque-aprender-programacao/gustavo-furtado/</link>
		<pubDate>Fri, 29 May 2015 21:42:43 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/gustavo-furtado.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7</wp:post_id>
		<wp:post_date><![CDATA[2015-05-29 21:42:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-29 21:42:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gustavo-furtado]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/gustavo-furtado.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/gustavo-furtado.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:400;s:6:"height";i:400;s:4:"file";s:27:"2015/05/gustavo-furtado.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"gustavo-furtado-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:27:"gustavo-furtado-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>aprender-ingles</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-1-porque-aprender-programacao/aprender-ingles/</link>
		<pubDate>Fri, 29 May 2015 21:43:06 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/aprender-ingles.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date><![CDATA[2015-05-29 21:43:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-29 21:43:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[aprender-ingles]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/aprender-ingles.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/aprender-ingles.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:400;s:6:"height";i:400;s:4:"file";s:27:"2015/05/aprender-ingles.gif";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"aprender-ingles-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:27:"aprender-ingles-300x300.gif";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>caderno-lapis-borracha</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-1-porque-aprender-programacao/caderno-lapis-borracha/</link>
		<pubDate>Fri, 29 May 2015 21:43:06 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/caderno-lapis-borracha.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date><![CDATA[2015-05-29 21:43:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-29 21:43:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[caderno-lapis-borracha]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/caderno-lapis-borracha.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/caderno-lapis-borracha.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:424;s:6:"height";i:305;s:4:"file";s:34:"2015/05/caderno-lapis-borracha.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"caderno-lapis-borracha-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:34:"caderno-lapis-borracha-300x216.jpg";s:5:"width";i:300;s:6:"height";i:216;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>codigo inglês</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-1-porque-aprender-programacao/codigo-ingles/</link>
		<pubDate>Fri, 29 May 2015 21:43:13 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/codigo-inglês.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date><![CDATA[2015-05-29 21:43:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-29 21:43:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[codigo-ingles]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/codigo-inglês.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/codigo-inglês.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1000;s:6:"height";i:667;s:4:"file";s:26:"2015/05/codigo-inglês.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"codigo-inglês-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:26:"codigo-inglês-300x200.jpg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:26:"codigo-inglês-825x510.jpg";s:5:"width";i:825;s:6:"height";i:510;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>fluxograma-lampada</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-1-porque-aprender-programacao/fluxograma-lampada/</link>
		<pubDate>Fri, 29 May 2015 21:43:14 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/fluxograma-lampada.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date><![CDATA[2015-05-29 21:43:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-29 21:43:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fluxograma-lampada]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/fluxograma-lampada.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/fluxograma-lampada.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:365;s:6:"height";i:413;s:4:"file";s:30:"2015/05/fluxograma-lampada.gif";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"fluxograma-lampada-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:30:"fluxograma-lampada-265x300.gif";s:5:"width";i:265;s:6:"height";i:300;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hello World</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-1-porque-aprender-programacao/hello-world/</link>
		<pubDate>Fri, 29 May 2015 21:43:14 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/Hello-World.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date><![CDATA[2015-05-29 21:43:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-29 21:43:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hello-world]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/Hello-World.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/Hello-World.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:762;s:6:"height";i:577;s:4:"file";s:23:"2015/05/Hello-World.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"Hello-World-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"Hello-World-300x227.png";s:5:"width";i:300;s:6:"height";i:227;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"Hello-World-762x510.png";s:5:"width";i:762;s:6:"height";i:510;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>imagem-criancas-programando</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-1-porque-aprender-programacao/imagem-criancas-programando/</link>
		<pubDate>Fri, 29 May 2015 21:43:21 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/imagem-criancas-programando.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date><![CDATA[2015-05-29 21:43:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-29 21:43:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[imagem-criancas-programando]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/imagem-criancas-programando.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/imagem-criancas-programando.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:683;s:4:"file";s:39:"2015/05/imagem-criancas-programando.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:39:"imagem-criancas-programando-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:39:"imagem-criancas-programando-300x200.jpg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:40:"imagem-criancas-programando-1024x683.jpg";s:5:"width";i:1024;s:6:"height";i:683;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:39:"imagem-criancas-programando-825x510.jpg";s:5:"width";i:825;s:6:"height";i:510;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";d:8;s:6:"credit";s:0:"";s:6:"camera";s:26:"Canon EOS DIGITAL REBEL XT";s:7:"caption";s:0:"";s:17:"created_timestamp";i:1252754605;s:9:"copyright";s:0:"";s:12:"focal_length";s:2:"10";s:3:"iso";s:3:"400";s:13:"shutter_speed";s:17:"0.066666666666667";s:5:"title";s:0:"";s:11:"orientation";i:1;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>linguagens</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-1-porque-aprender-programacao/linguagens/</link>
		<pubDate>Fri, 29 May 2015 21:43:22 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/linguagens.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date><![CDATA[2015-05-29 21:43:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-29 21:43:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[linguagens]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/linguagens.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/linguagens.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:402;s:6:"height";i:403;s:4:"file";s:22:"2015/05/linguagens.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"linguagens-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:22:"linguagens-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>output-hello-world</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-1-porque-aprender-programacao/output-hello-world/</link>
		<pubDate>Fri, 29 May 2015 21:43:23 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/output-hello-world.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date><![CDATA[2015-05-29 21:43:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-29 21:43:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[output-hello-world]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/output-hello-world.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/output-hello-world.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:557;s:6:"height";i:151;s:4:"file";s:30:"2015/05/output-hello-world.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"output-hello-world-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"output-hello-world-300x81.png";s:5:"width";i:300;s:6:"height";i:81;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>software-agricultura</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-1-porque-aprender-programacao/software-agricultura/</link>
		<pubDate>Fri, 29 May 2015 21:43:25 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/software-agricultura.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>18</wp:post_id>
		<wp:post_date><![CDATA[2015-05-29 21:43:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-29 21:43:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[software-agricultura]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/software-agricultura.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/software-agricultura.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:600;s:6:"height";i:399;s:4:"file";s:32:"2015/05/software-agricultura.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:32:"software-agricultura-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:32:"software-agricultura-300x200.jpg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>visualg-pagina-inicial</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-1-porque-aprender-programacao/visualg-pagina-inicial/</link>
		<pubDate>Fri, 29 May 2015 21:43:26 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/visualg-pagina-inicial.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>19</wp:post_id>
		<wp:post_date><![CDATA[2015-05-29 21:43:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-29 21:43:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[visualg-pagina-inicial]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/visualg-pagina-inicial.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/visualg-pagina-inicial.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:904;s:6:"height";i:612;s:4:"file";s:34:"2015/05/visualg-pagina-inicial.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"visualg-pagina-inicial-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:34:"visualg-pagina-inicial-300x203.png";s:5:"width";i:300;s:6:"height";i:203;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:34:"visualg-pagina-inicial-825x510.png";s:5:"width";i:825;s:6:"height";i:510;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>variável</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-3-variaveis-constantes-operadores-e-tipos-de-dados/variavel/</link>
		<pubDate>Sat, 30 May 2015 21:09:45 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/variável.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>142</wp:post_id>
		<wp:post_date><![CDATA[2015-05-30 21:09:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-30 21:09:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[variavel]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>135</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/variável.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/variável.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:249;s:6:"height";i:202;s:4:"file";s:21:"2015/05/variável.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"variável-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>tipos-de-dados</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-3-variaveis-constantes-operadores-e-tipos-de-dados/tipos-de-dados/</link>
		<pubDate>Sun, 31 May 2015 11:45:05 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/tipos-de-dados.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>155</wp:post_id>
		<wp:post_date><![CDATA[2015-05-31 11:45:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-31 11:45:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tipos-de-dados]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>135</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/tipos-de-dados.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/tipos-de-dados.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:229;s:6:"height";i:220;s:4:"file";s:26:"2015/05/tipos-de-dados.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"tipos-de-dados-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>classe-carro</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-3-variaveis-constantes-operadores-e-tipos-de-dados/classe-carro/</link>
		<pubDate>Sun, 31 May 2015 11:51:50 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/classe-carro.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>159</wp:post_id>
		<wp:post_date><![CDATA[2015-05-31 11:51:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-31 11:51:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[classe-carro]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>135</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/classe-carro.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/classe-carro.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:221;s:6:"height";i:228;s:4:"file";s:24:"2015/05/classe-carro.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"classe-carro-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>operadores-aritméticos</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-3-variaveis-constantes-operadores-e-tipos-de-dados/operadores-aritmeticos/</link>
		<pubDate>Sun, 31 May 2015 12:38:14 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/operadores-aritméticos.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>176</wp:post_id>
		<wp:post_date><![CDATA[2015-05-31 12:38:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-31 12:38:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[operadores-aritmeticos]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>135</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/operadores-aritméticos.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/operadores-aritméticos.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:400;s:6:"height";i:225;s:4:"file";s:35:"2015/05/operadores-aritméticos.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:35:"operadores-aritméticos-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:35:"operadores-aritméticos-300x169.jpg";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>portas-lógicas-AND</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-4-operadores/portas-logicas-and/</link>
		<pubDate>Tue, 02 Jun 2015 02:24:51 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/portas-lógicas-AND.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>204</wp:post_id>
		<wp:post_date><![CDATA[2015-06-02 02:24:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-02 02:24:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[portas-logicas-and]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>192</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/portas-lógicas-AND.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/06/portas-lógicas-AND.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:233;s:6:"height";i:117;s:4:"file";s:31:"2015/06/portas-lógicas-AND.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"portas-lógicas-AND-150x117.jpg";s:5:"width";i:150;s:6:"height";i:117;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:1;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>portas-lógicas-OR</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-4-operadores/portas-logicas-or/</link>
		<pubDate>Tue, 02 Jun 2015 02:24:54 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/portas-lógicas-OR.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>205</wp:post_id>
		<wp:post_date><![CDATA[2015-06-02 02:24:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-02 02:24:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[portas-logicas-or]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>192</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/portas-lógicas-OR.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/06/portas-lógicas-OR.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:219;s:6:"height";i:125;s:4:"file";s:30:"2015/06/portas-lógicas-OR.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"portas-lógicas-OR-150x125.jpg";s:5:"width";i:150;s:6:"height";i:125;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:1;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>portas-lógicas-NOT</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-4-operadores/portas-logicas-not/</link>
		<pubDate>Tue, 02 Jun 2015 02:24:56 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/portas-lógicas-NOT.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>206</wp:post_id>
		<wp:post_date><![CDATA[2015-06-02 02:24:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-02 02:24:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[portas-logicas-not]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>192</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/portas-lógicas-NOT.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/06/portas-lógicas-NOT.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:214;s:6:"height";i:107;s:4:"file";s:31:"2015/06/portas-lógicas-NOT.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"portas-lógicas-NOT-150x107.jpg";s:5:"width";i:150;s:6:"height";i:107;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:1;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>portas-lógicas-NAND</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-4-operadores/portas-logicas-nand/</link>
		<pubDate>Tue, 02 Jun 2015 02:24:58 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/portas-lógicas-NAND.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>207</wp:post_id>
		<wp:post_date><![CDATA[2015-06-02 02:24:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-02 02:24:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[portas-logicas-nand]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>192</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/portas-lógicas-NAND.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/06/portas-lógicas-NAND.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:244;s:6:"height";i:119;s:4:"file";s:32:"2015/06/portas-lógicas-NAND.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:32:"portas-lógicas-NAND-150x119.jpg";s:5:"width";i:150;s:6:"height";i:119;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:1;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>pórtas-lógicas-NOR</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-4-operadores/portas-logicas-nor/</link>
		<pubDate>Tue, 02 Jun 2015 02:25:01 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/pórtas-lógicas-NOR.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>208</wp:post_id>
		<wp:post_date><![CDATA[2015-06-02 02:25:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-02 02:25:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[portas-logicas-nor]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>192</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/pórtas-lógicas-NOR.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/06/pórtas-lógicas-NOR.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:239;s:6:"height";i:116;s:4:"file";s:32:"2015/06/pórtas-lógicas-NOR.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:32:"pórtas-lógicas-NOR-150x116.jpg";s:5:"width";i:150;s:6:"height";i:116;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:1;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>portas-lógicas-XOR</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-4-operadores/portas-logicas-xor/</link>
		<pubDate>Tue, 02 Jun 2015 02:25:05 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/portas-lógicas-XOR.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>209</wp:post_id>
		<wp:post_date><![CDATA[2015-06-02 02:25:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-02 02:25:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[portas-logicas-xor]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>192</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/portas-lógicas-XOR.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/06/portas-lógicas-XOR.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:239;s:6:"height";i:124;s:4:"file";s:31:"2015/06/portas-lógicas-XOR.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"portas-lógicas-XOR-150x124.jpg";s:5:"width";i:150;s:6:"height";i:124;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:1;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>portas-lógicas-XNOR</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-4-operadores/portas-logicas-xnor/</link>
		<pubDate>Tue, 02 Jun 2015 02:25:07 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/portas-lógicas-XNOR.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>210</wp:post_id>
		<wp:post_date><![CDATA[2015-06-02 02:25:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-02 02:25:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[portas-logicas-xnor]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>192</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/portas-lógicas-XNOR.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/06/portas-lógicas-XNOR.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:254;s:6:"height";i:122;s:4:"file";s:32:"2015/06/portas-lógicas-XNOR.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:32:"portas-lógicas-XNOR-150x122.jpg";s:5:"width";i:150;s:6:"height";i:122;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:1;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>resultado-bitwise</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-4-operadores/resultado-bitwise/</link>
		<pubDate>Tue, 02 Jun 2015 02:31:27 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/resultado-bitwise.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>214</wp:post_id>
		<wp:post_date><![CDATA[2015-06-02 02:31:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-02 02:31:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[resultado-bitwise]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>192</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/resultado-bitwise.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/06/resultado-bitwise.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:677;s:6:"height";i:142;s:4:"file";s:29:"2015/06/resultado-bitwise.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"resultado-bitwise-150x142.png";s:5:"width";i:150;s:6:"height";i:142;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"resultado-bitwise-300x63.png";s:5:"width";i:300;s:6:"height";i:63;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>resultado-operadores-relacionais</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-4-operadores/resultado-operadores-relacionais/</link>
		<pubDate>Tue, 02 Jun 2015 02:57:21 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/resultado-operadores-relacionais.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>220</wp:post_id>
		<wp:post_date><![CDATA[2015-06-02 02:57:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-02 02:57:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[resultado-operadores-relacionais]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>192</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/resultado-operadores-relacionais.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/06/resultado-operadores-relacionais.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:681;s:6:"height";i:333;s:4:"file";s:44:"2015/06/resultado-operadores-relacionais.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:44:"resultado-operadores-relacionais-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:44:"resultado-operadores-relacionais-300x147.png";s:5:"width";i:300;s:6:"height";i:147;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>estrutura-IF</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-5-tomando-decisoes/estrutura-if/</link>
		<pubDate>Tue, 02 Jun 2015 15:51:21 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/estrutura-IF.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>240</wp:post_id>
		<wp:post_date><![CDATA[2015-06-02 15:51:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-02 15:51:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[estrutura-if]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>228</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/estrutura-IF.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/06/estrutura-IF.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:580;s:6:"height";i:515;s:4:"file";s:24:"2015/06/estrutura-IF.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"estrutura-IF-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:24:"estrutura-IF-300x266.png";s:5:"width";i:300;s:6:"height";i:266;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:24:"estrutura-IF-580x510.png";s:5:"width";i:580;s:6:"height";i:510;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sacar-dinheiro-menor-que-10001</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-5-tomando-decisoes/sacar-dinheiro-menor-que-10001/</link>
		<pubDate>Tue, 02 Jun 2015 15:59:23 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/Sacar-dinheiro-menor-que-10001.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>247</wp:post_id>
		<wp:post_date><![CDATA[2015-06-02 15:59:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-02 15:59:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sacar-dinheiro-menor-que-10001]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>228</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/Sacar-dinheiro-menor-que-10001.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/06/Sacar-dinheiro-menor-que-10001.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:681;s:6:"height";i:199;s:4:"file";s:42:"2015/06/Sacar-dinheiro-menor-que-10001.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:42:"Sacar-dinheiro-menor-que-10001-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:41:"Sacar-dinheiro-menor-que-10001-300x88.png";s:5:"width";i:300;s:6:"height";i:88;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sacar-dinheiro-maior-que-1000</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-5-tomando-decisoes/sacar-dinheiro-maior-que-1000/</link>
		<pubDate>Tue, 02 Jun 2015 15:59:52 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/Sacar-dinheiro-maior-que-1000.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>248</wp:post_id>
		<wp:post_date><![CDATA[2015-06-02 15:59:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-02 15:59:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sacar-dinheiro-maior-que-1000]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>228</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/Sacar-dinheiro-maior-que-1000.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/06/Sacar-dinheiro-maior-que-1000.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:681;s:6:"height";i:228;s:4:"file";s:41:"2015/06/Sacar-dinheiro-maior-que-1000.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:41:"Sacar-dinheiro-maior-que-1000-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:41:"Sacar-dinheiro-maior-que-1000-300x100.png";s:5:"width";i:300;s:6:"height";i:100;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>resultado algoritmo_basico</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-2-criando-os-primeiros-programas/resultado-algoritmo_basico/</link>
		<pubDate>Tue, 02 Jun 2015 17:54:27 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/resultado-algoritmo_basico.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>258</wp:post_id>
		<wp:post_date><![CDATA[2015-06-02 17:54:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-02 17:54:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[resultado-algoritmo_basico]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>38</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/resultado-algoritmo_basico.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/resultado-algoritmo_basico.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:471;s:6:"height";i:183;s:4:"file";s:38:"2015/05/resultado-algoritmo_basico.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:38:"resultado-algoritmo_basico-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:38:"resultado-algoritmo_basico-300x117.png";s:5:"width";i:300;s:6:"height";i:117;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>algoritmo_multiplicacao</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-2-criando-os-primeiros-programas/algoritmo_multiplicacao/</link>
		<pubDate>Tue, 02 Jun 2015 19:09:45 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/algoritmo_multiplicacao.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>263</wp:post_id>
		<wp:post_date><![CDATA[2015-06-02 19:09:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-02 19:09:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[algoritmo_multiplicacao]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>38</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/algoritmo_multiplicacao.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/algoritmo_multiplicacao.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:501;s:6:"height";i:377;s:4:"file";s:35:"2015/05/algoritmo_multiplicacao.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:35:"algoritmo_multiplicacao-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:35:"algoritmo_multiplicacao-300x226.png";s:5:"width";i:300;s:6:"height";i:226;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>resultado_algoritmo_multiplicacao</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-2-criando-os-primeiros-programas/resultado_algoritmo_multiplicacao/</link>
		<pubDate>Tue, 02 Jun 2015 19:10:40 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/resultado_algoritmo_multiplicacao.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>264</wp:post_id>
		<wp:post_date><![CDATA[2015-06-02 19:10:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-02 19:10:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[resultado_algoritmo_multiplicacao]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>38</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/resultado_algoritmo_multiplicacao.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/resultado_algoritmo_multiplicacao.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:461;s:6:"height";i:190;s:4:"file";s:45:"2015/05/resultado_algoritmo_multiplicacao.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:45:"resultado_algoritmo_multiplicacao-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:45:"resultado_algoritmo_multiplicacao-300x124.png";s:5:"width";i:300;s:6:"height";i:124;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>HUB</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-6-tomando-decisoes-entre-muitas-opcoes/hub/</link>
		<pubDate>Tue, 30 Jun 2015 11:31:35 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/HUB.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>275</wp:post_id>
		<wp:post_date><![CDATA[2015-06-30 11:31:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-30 11:31:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hub]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>267</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/HUB.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/06/HUB.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:225;s:6:"height";i:225;s:4:"file";s:15:"2015/06/HUB.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"HUB-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>hub e switch</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-6-tomando-decisoes-entre-muitas-opcoes/hub-e-switch/</link>
		<pubDate>Tue, 30 Jun 2015 11:36:20 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/hub-e-switch.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>276</wp:post_id>
		<wp:post_date><![CDATA[2015-06-30 11:36:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-30 11:36:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hub-e-switch]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>267</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/hub-e-switch.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/06/hub-e-switch.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:233;s:4:"file";s:24:"2015/06/hub-e-switch.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"hub-e-switch-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:24:"hub-e-switch-300x109.png";s:5:"width";i:300;s:6:"height";i:109;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>estrutura-ESCOLHA-CASO</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-6-tomando-decisoes-entre-muitas-opcoes/estrutura-escolha-caso/</link>
		<pubDate>Tue, 30 Jun 2015 12:26:15 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/estrutura-ESCOLHA-CASO.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>284</wp:post_id>
		<wp:post_date><![CDATA[2015-06-30 12:26:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-30 12:26:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[estrutura-escolha-caso]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>267</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/estrutura-ESCOLHA-CASO.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/06/estrutura-ESCOLHA-CASO.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:687;s:6:"height";i:513;s:4:"file";s:34:"2015/06/estrutura-ESCOLHA-CASO.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"estrutura-ESCOLHA-CASO-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:34:"estrutura-ESCOLHA-CASO-300x224.png";s:5:"width";i:300;s:6:"height";i:224;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:34:"estrutura-ESCOLHA-CASO-687x510.png";s:5:"width";i:687;s:6:"height";i:510;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>estrutura-ENQUATO</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-7-loops-basicos/estrutura-enquato/</link>
		<pubDate>Tue, 01 Sep 2015 00:53:47 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/09/estrutura-ENQUATO.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>308</wp:post_id>
		<wp:post_date><![CDATA[2015-09-01 00:53:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-01 00:53:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[estrutura-enquato]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>290</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/09/estrutura-ENQUATO.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/09/estrutura-ENQUATO.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:400;s:6:"height";i:515;s:4:"file";s:29:"2015/09/estrutura-ENQUATO.png";s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>estrutura-REPITA</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-7-loops-basicos/estrutura-repita/</link>
		<pubDate>Tue, 01 Sep 2015 01:49:03 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/07/estrutura-REPITA.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>316</wp:post_id>
		<wp:post_date><![CDATA[2015-09-01 01:49:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-01 01:49:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[estrutura-repita]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>290</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/07/estrutura-REPITA.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/07/estrutura-REPITA.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:397;s:6:"height";i:507;s:4:"file";s:28:"2015/07/estrutura-REPITA.png";s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Resultado-algoritmo-ENQUANTO</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-7-loops-basicos/resultado-algoritmo-enquanto/</link>
		<pubDate>Tue, 01 Sep 2015 02:01:05 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/07/Resultado-algoritmo-ENQUANTO.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>318</wp:post_id>
		<wp:post_date><![CDATA[2015-09-01 02:01:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-01 02:01:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[resultado-algoritmo-enquanto]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>290</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/07/Resultado-algoritmo-ENQUANTO.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/07/Resultado-algoritmo-ENQUANTO.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:682;s:6:"height";i:292;s:4:"file";s:40:"2015/07/Resultado-algoritmo-ENQUANTO.png";s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>estrutura-PARA</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/aula-8-loops-pre-definidos/estrutura-para/</link>
		<pubDate>Mon, 28 Sep 2015 19:46:58 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/09/estrutura-PARA.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>347</wp:post_id>
		<wp:post_date><![CDATA[2015-09-28 19:46:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-28 19:46:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[estrutura-para]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>334</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/09/estrutura-PARA.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/09/estrutura-PARA.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:440;s:6:"height";i:608;s:4:"file";s:26:"2015/09/estrutura-PARA.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"estrutura-PARA-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"estrutura-PARA-217x300.png";s:5:"width";i:217;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:26:"estrutura-PARA-440x510.png";s:5:"width";i:440;s:6:"height";i:510;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Resultado-Fatorial</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/aula-8-loops-pre-definidos/resultado-fatorial/</link>
		<pubDate>Mon, 28 Sep 2015 20:03:34 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/09/Resultado-Fatorial.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>349</wp:post_id>
		<wp:post_date><![CDATA[2015-09-28 20:03:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-28 20:03:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[resultado-fatorial]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>334</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/09/Resultado-Fatorial.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/09/Resultado-Fatorial.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:681;s:6:"height";i:138;s:4:"file";s:30:"2015/09/Resultado-Fatorial.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"Resultado-Fatorial-150x138.png";s:5:"width";i:150;s:6:"height";i:138;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"Resultado-Fatorial-300x61.png";s:5:"width";i:300;s:6:"height";i:61;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>vetor-e-matriz</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/aula-9-vetores-e-matrizes-arrays/vetor-e-matriz/</link>
		<pubDate>Mon, 28 Sep 2015 23:28:54 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/09/vetor-e-matriz.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>357</wp:post_id>
		<wp:post_date><![CDATA[2015-09-28 23:28:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-28 23:28:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[vetor-e-matriz]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>356</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/09/vetor-e-matriz.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/09/vetor-e-matriz.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:593;s:6:"height";i:623;s:4:"file";s:26:"2015/09/vetor-e-matriz.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"vetor-e-matriz-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"vetor-e-matriz-286x300.png";s:5:"width";i:286;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:26:"vetor-e-matriz-593x510.png";s:5:"width";i:593;s:6:"height";i:510;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>função</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/aula-10-funcoes-e-procedimentos/funcao/</link>
		<pubDate>Fri, 04 Dec 2015 22:07:37 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/12/função.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>385</wp:post_id>
		<wp:post_date><![CDATA[2015-12-04 22:07:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-04 22:07:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[funcao]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>381</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/12/função.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/função.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:503;s:6:"height";i:332;s:4:"file";s:20:"2015/12/função.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"função-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"função-300x198.png";s:5:"width";i:300;s:6:"height";i:198;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Aula 1/10 - Por que aprender programação?</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-1-porque-aprender-programacao/</link>
		<pubDate>Fri, 29 May 2015 21:51:50 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/?page_id=6</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Aula (1/10) Por que aprender programação?</h1>
Olá nobre amigo(a)! Seja bem vindo à primeira aula do Minicurso GRÁTIS de lógica de programação do blog <b>{ Dicas de Programação }</b>.<a href="http://gustavofurtado.com.br/" target="_blank">
<img style="float: right; margin: 5px 5px 5px 30px;" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/gustavo-furtado.jpg" alt="Gustavo Furtado" width="200px" height="200px" /></a>

Meu nome é <b>Gustavo Furtado de Oliveira Alves</b> e eu vou te ajudar a criar uma base sólida de conhecimento que te permitirá criar programas em qualquer linguagem de programação que o mercado de trabalho requisitar.

Ao longo deste mini-curso, você aprenderá os conceitos básicos por trás da programação e será capaz de criar pequenos programas usando lógica de programação.

Bom, vamos à primeira aula deste mini-curso. Nesta aula você vai aprender:
<ul>
	<li>Porquê você PRECISA aprender programação.</li>
	<li>Você não precisa já saber inglês pra começar.</li>
	<li>Qual linguagem você deve escolher para aprender lógica de programação.</li>
</ul>
<u>Leitura de aproximadamente 15 minutos.</u>
<h2>4 Motivos para você começar aprender programação AGORA!</h2>
&nbsp;
<blockquote>"I think everybody in this country should learn how to program a computer because it teaches you how to think."
<div style="text-align: right;">— Steve Jobs, the Lost Interview</div></blockquote>
Assim como Steve Jobs disse a frase acima, eu também penso que todos deveriam aprender a programar. A evolução tecnológica melhora a vida das pessoas como podemos perceber nos últimos tempos e o Software é um dos pilares da tecnologia do nosso tempo. Com softwares pode-se resolver muitos problemas do dia-a-dia. Então por que não aprender a criar softwares para automatizar tarefas e assim economizar tempo e dinheiro?
<h3>1º Você vai mudar a sua forma de pensar!</h3>
Aprender programação ajuda muito a forma como as pessoas pensam, principalmente por desenvolver a disciplina da lógica, que é um campo da filosofia criado por Aristóteles que cuida das regras do bem pensar, ou do pensar correto, sendo portanto, um instrumento do pensar. A lógica guia o raciocínio humano através de argumentos para chegar a conclusões de verdade.

Quando uma pessoa aprende a programar, ela desenvolve uma nova forma de pensar. Todas as decisões passam a ser tomadas levando em consideração pensamentos sistêmicos e racionais que convergem para o bom-senso da razão humana. Quando programação for uma disciplina básica da educação o mundo entrará na próxima era da evolução da humanidade.
<h3>2º Programação é a nova disciplina básica da alfabetização</h3>
<img style="float: right; margin: 5px 5px 5px 30px;" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/imagem-criancas-programando.jpg" alt="aprender programação" width="376" height="250" />

Muitas pessoas pensam que programação é só pra quem fica o dia inteiro na frente do computador e tem facilidade para mexer na máquina. Isso é natural, principalmente entre as pessoas mais velhas que cresceram sem o contato com a tecnologia atual.

Apesar de parecer intimidante no começo, programar não é tão complicado como muitos pensam.

Na verdade, da mesma forma como ler, escrever e fazer cálculos básicos, programação é a nova disciplina básica para alfabetização. Tenho certeza que em poucos anos, programação será ensinado nas escolas de ensino fundamental.
<h3>3º Os softwares estão em tudo!</h3>
Já parou pra pensar na quantidade de coisas que estamos direta e indiretamente em contato e que são controlados por softwares? Calculadoras, computadores, celulares, smartphones, tablets, internet, TVs, micro-ondas, geladeiras, caixa eletrônicos, linhas de produção, satélites, carros, impressoras, letreiros digitais, drones, câmeras, semáforos, microcontroladores, pendrive e mais um monte de coisa que eu ficaria horas (dias?) enumerando.

<img style="float: left; margin: 5px 30px 5px 5px;" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/software-agricultura.jpg" alt="software na no agronegócio" width="376" height="250" />

Hoje em dia muitas coisas a nossa volta tem uma espécie de vida própria. E tudo é controlado por ... Softwares! Dispositivos que são controlados por softwares estão por toda parte, em todos os seguimentos industriais. Agricultura, manufatura, logística, marketing, agropecuária, medicina, etc. Atividades onde você menos imagina têm software!

Isso tudo falando só do presente, deixo a sua imaginação livre para pensar no que vem pela frente nos anos vindouros.

Você precisa estar preparado para participar dessa nova era!
<h3>4º Você já sabe programar! Só não te contaram...</h3>
Diferente do que muitos pensam, programação não é um monte de código que poucos conseguem entender. No fundo, programar é ensinar uma máquina a resolver problemas. Sem perceber, todos nós resolvemos problemas e tomamos decisões o tempo todo!

Para programar, você precisa organizar e entender a forma como você resolve os problemas. Você já toma decisões e realiza tarefas o tempo todo, programar nada mais é do que ensinar uma máquina a fazer isso.

Programação é uma forma de automatizar decisões e atividades através de instruções que um equipamento eletrônico pode seguir para executar uma tarefa autonomamente. Ao entender este conceito, códigos que você achava que era coisa de outro mundo começam a fazer sentido.
<h2>Preciso saber inglês para aprender programação?</h2>
Eu acredito que este seja o maior predador de iniciantes em programação.

É verdade que é possível aprender programação sem saber inglês, eu mesmo sou prova disso.

Quando ingressei no ensino médio e técnico em informática na ETPC (uma escola técnica em Volta Redonda-RJ) eu só sabia o inglês que me foi ensinado no ensino fundamental de uma escola pública, ou seja, quase nada. Importante ressaltar que não desmereço em momento algum os professores de escola pública, são guerreiros, mas todos sabemos como é o sistema público brasileiro de educação. Não é mesmo?

<img style="float: right; margin: 5px 5px 5px 30px;" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/aprender-ingles.gif" alt="preciso aprender inglês?" width="376" height="250" />

Lembro das minhas primeiras aulas de programação, como era difícil entender o significado dos comandos que o professor ensinava em sala de aula, juro que sentia dificuldade para decorar palavras básicas em inglês como IF, THEN, ELSE, WHILE, FOR, REPEAT, UNTIL, BEGIN, etc. Bom, acho que deu para perceber que eu não sabia nada mesmo de inglês. Ah! Não tenho um pingo de vergonha disso! Foi só um obstaculo-zinho que estava no meu caminho. Mas já ultrapassado. E se você não sabe inglês, não tenha medo! Basta querer e se esforçar.

Por ser tão importante, quero te dizer isso logo no início deste minicurso: <b>Sim! É possível começar a aprender programação sem saber inglês!</b> Aliás neste curso os códigos vão ser todos em português, mas <strong>é muito importante, muito importante mesmo, aprender inglês</strong> para ser um bom programador. Como seu tutor neste início da sua jornada, tenho o dever de te falar isso.

As linguagens de programação profissionais da atualidade são todas em inglês, você também precisará pesquisar na internet para evoluir e resolver problemas dos seus programas, e acredite, a maioria das respostas para as suas dúvidas estarão na sua cara, mas em inglês. Já passei por isso!

Inglês não é um impeditivo para aprender a programar, mas certamente será uma pedra no seu sapato ao longo da sua carreira se você ainda não souber.

Mas não se preocupe, você pode aprender inglês junto com programação. Portanto, <strong>comece já os estudos de inglês em paralelo com a programação</strong>.

Eu escrevi um post sobre isso no blog <strong>{ Dicas de Programação }</strong>. Dê uma olhada depois.

<strong><a href="https://dicasdeprogramacao.com.br/quer-ser-programador-aprenda-ingles/" target="_blank">Quer ser programador? Aprenda inglês!</a></strong>
<h2>Com qual linguagem começar</h2>
A pergunta que é feita por todo mundo que está aprendendo a programar é: Que linguagem de programação devo aprender? A resposta é óbvia: <b>Uma linguagem de programação para iniciantes!</b>

Você deve ter consciência que ao longo da sua carreira como programador, você sempre terá que aprender uma linguagem de programação nova. Pois todas tem suas vantagens e desvantagens.

Uma dica interessante é: não seja fanático por uma linguagem específica! Muitas pessoas defendem com unhas e dentes a linguagem de programação que têm mais afinidade. Basta olhar nos forums da internet as respostas para a pergunta: "Qual a melhor linguagem de programação para iniciantes?

Mas isso não é bom! <b>Para cada projeto, cada trabalho, uma linguagem é mais indicada ou não.</b> Você deve decidir qual usar não com base no seu gosto pessoal, mas nas vantagens que a linguagem oferece para o software que você pretende desenvolver.

<img style="float: right; margin: 5px 5px 5px 30px;" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/linguagens.jpg" alt="Qual linguagem escolher?" width="376" height="250" />

Se você é iniciante e não sabe nada de programação, procure uma linguagem de programação que te ajude a aprender lógica de programação.

Só depois de aprender o básico que você deve aprender uma outra linguagem mais profissional.

Muitas pessoas já começam aprendendo lógica de programação com linguagens como Java, C, Python, C#, etc. É totalmente válido e muitos conseguem de fato aprender (especialmente se já souber inglês), mas algumas pessoas podem ter dificuldade de assimilar os conceitos básicos com essas linguagens.

Então, para quem nunca programou antes, indico fortemente que comece com uma linguagem que o ajude aprender a programar.

Agora vou te confessar uma coisa. Foi difícil eu entender isso quando comecei a ensinar programação, queria logo que os alunos aprendessem Java, PHP, C, C#, Python, etc. Mas a dificuldade dos iniciantes era conseguir aprender lógica de programação tendo que “decorar” os comandos exigidos pela linguagem.

Por exemplo, pra fazer um programinha "Hello World" em JAVA é preciso criar uma classe e um método, e já exigir que o estudante de programação escreva palavras específicas de java como <b>class</b>, <b>public</b>, <b>static</b>, <b>void</b> e <b>main</b>.

Nesse ponto aliás, Python é uma linguagem muito boa para se aprender, pois vai direto ao ponto.

Não quero aqui entrar em discussão de linguagem X é melhor pra aprender que a linguagem Y, pois há muita discussão sobre isso na internet, principalmente entre pessoas que defendem a "linguagem preferida" ou que argumentam apenas qual é melhor para o o mercado de trabalho atual.

O que eu quero deixar claro pra você é que <b>você deve escolher a linguagem a se aprender baseado no seu objetivo</b>.

Se o seu objetivo agora é aprender lógica de programação, utilize uma linguagem que vai te ajudar a aprender lógica de programação! Pronto.

Ou se você já domina lógica e quer aprender uma linguagem pra arrumar um emprego, pesquise no mercado a linguagem que está sendo mais pedida nas vagas de emprego atualmente.

Se você quer criar um software embarcado, procure uma linguagem apropriada e mais usada para softwares embarcados.

O mercado muda, a linguagem "da moda" hoje pode não estar tão em alta amanhã. Pense nisso. Por isso digo que sempre que você decidir aprender uma linguagem nova de programação, pense no seu objetivo de curto, médio e longo prazo.

Entendeu?
<h2>Paradigma "Como" fazer e "O que" fazer</h2>
Há uma outra discussão muito interessante também sobre aprender ou não lógica de programação no início da carreira, pois algumas linguagens de programação foram criadas para outros paradigmas de programação em que a forma de programar é completamente diferente.

Linguagens como <b>Lisp</b>, <b>Prolog</b>, <b>IPL</b>, etc. utilizam paradigmas de programação que não trabalham a forma do "como" fazer e sim o "quê" fazer.

Se, para atingir o seu atual objetivo, você tenha que aprender alguma dessas linguagens agora, talvez o melhor realmente não seja aprender lógica de programação neste momento.

A decisão do que aprender deve ser sua, baseada no objetivo que você quer alcançar.

Se você quer aprender programação para conseguir um emprego, sugiro que aprenda lógica de programação, pois a maioria das vagas de emprego atuais requerem alguma linguagem de programação do paradigma do "como" fazer, ou seja, implementar algoritmos.

<b>Estou dedicando este minicurso para pessoas que nunca tiveram contato com lógica de programação</b> e pelas minhas pesquisas, descobri que muitos não dominam inglês, vamos escrever códigos em português e utilizar uma linguagem simples para transmitir os conceitos importantes, pois o objetivo é ensinar o básico.

Mas como já disse, é muito importante aprender inglês se você pretende se profissionalizar em programação.

Se você já domina inglês e quiser implementar os exemplos e exercícios desse minicurso em outra linguagem mais profissional, ÓTIMO! Fique a vontade, escolha a linguagem que você quer aprender (baseado no seu objetivo) e mãos a obra!

Por hoje é só. Na próxima aula, vamos ver como instalar a ferramenta que vamos usar pra aprender programação e criar os nossos primeiros programas!

Se você se inscreveu neste mini-curso, receberá a próxima aula por e-mail amanhã. Se ainda não está inscrito, não perca tempo. É GRÁTIS!

Até a próxima!

Gustavo]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date><![CDATA[2015-05-29 21:51:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-29 21:51:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[minicurso-1-porque-aprender-programacao]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[page-lesson.php]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Aula 2/10 - Criando os seus primeiros programinhas.</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-2-criando-os-primeiros-programas/</link>
		<pubDate>Sat, 30 May 2015 00:03:47 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/?page_id=38</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Aula(2/10) Criando os seus primeiros programinhas.</h1>
Olá amigo(a)! Esta é a nossa segunda aula do Minicurso GRÁTIS de lógica de programação do blog <b>{ Dicas de Programação }</b>.

Na primeira aula deste curso eu te expliquei porque você DEVE começar a aprender programação AGORA mesmo. Também ensinei que você não precisa saber inglês para começar e porque vamos escrever algoritmos em PORTUGUÊS nos exercícios e exemplos deste minicurso.

Bom, vamos à segunda aula deste mini-curso. Nesta aula você vai aprender:
<ul>
	<li>O que é um Algoritmo.</li>
	<li>Como instalar o Visualg para aprender lógica de programação.</li>
	<li>Criará os seus primeiros programas.</li>
</ul>
<u>Leitura de aproximadamente 20 minutos.</u>
<h2>O que é um Algoritmo?</h2>
O primeiro passo para se aprender a programar não envolve computador, envolve educar a sua mente a explicar em detalhes os passos necessários para executar uma tarefa.

<img style="float: right; margin: 5px 5px 5px 30px;" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/fluxograma-lampada.gif" alt="Ferramenta para aprender programação" />

Você deve aprender a modelar um roteiro que explica quando tomar decisões e quando realizar determinadas tarefas, esse roteiro é chamado de "algoritmo".

Você sabia que os primeiros processadores só sabiam realizar somas?

A partir dessa operação básica que o computador sabia fazer, você já imagina um algoritmo para fazer multiplicações?

Talvez você ainda não saiba exatamente como é esse algoritmo, mas com certeza já imaginou que precisa fazer repetidas somas. Certo?

É assim que nós aprendemos fazer multiplicação na escola. E essa também é uma forma de ensinar uma máquina a fazer multiplicação.

Agora que você já pensou como faz multiplicação através de somas, vou mostrar como eu faria um algoritmo para realizar uma multiplicação de dois números.
<blockquote>
<p style="text-align: justify;">Algoritmo <strong>Multiplicação de números positivos</strong></p>
<p style="text-align: justify;"><strong>Declaração de variáveis</strong></p>
<p style="text-align: justify; padding-left: 30px;">numero1, numero2, resultado, contador: Inteiro</p>
<p style="text-align: justify;"><strong>Inicio</strong></p>
<p style="text-align: justify; padding-left: 30px;">leia(numero1)</p>
<p style="text-align: justify; padding-left: 30px;">leia(numero2)</p>
<p style="text-align: justify; padding-left: 30px;">resultado &lt;- 0</p>
<p style="text-align: justify; padding-left: 30px;">contador &lt;- 0</p>
<p style="text-align: justify; padding-left: 30px;"><strong>Enquanto </strong>contador &lt; numero2 <strong>Faça</strong></p>
<p style="text-align: justify; padding-left: 60px;">resultado &lt;- resultado + numero1</p>
<p style="text-align: justify; padding-left: 60px;">contador &lt;- contador + 1</p>
<p style="text-align: justify; padding-left: 30px;"><strong>Fim-Enquanto</strong></p>
<p style="text-align: justify; padding-left: 30px;">escreva(resultado)</p>
<p style="text-align: justify;"><strong>Fim</strong></p>
</blockquote>
Talvez este algoritmo possa ser um pouco complicado para você entender agora, sendo o primeiro algoritmo que te mostro, mas continue lendo que vou mostrar alguns algoritmos mais simples hoje. Ao final você entenderá exatamente como esse algoritmo funciona... Antes vamos ver a ferramenta que vamos usar ao longo deste minicurso.
<h2>A melhor ferramenta para aprender lógica de programação</h2>
Sabe qual a melhor ferramenta de estudos para aprender lógica de programação?

<img style="float: right; margin: 5px 5px 5px 30px;" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/caderno-lapis-borracha.jpg" alt="Ferramenta para aprender programação" width="376" height="250" />

<b>Caderno, lápis e borracha!</b> Sim, essa é a melhor ferramenta para aprender lógica de programação!

Na verdade, digo isso porque foi assim que eu aprendi: escrevendo algoritmos no caderno. No começo, usa-se mais a borracha que o lápis! rs.

Embora naquela época não tivesse muito recurso tecnológico para aprender lógica de programação, acredito que hoje com tantas distrações na internet talvês seja realmente melhor se desligar disso tudo para conseguir aprender algo.

Uma técnica que gosto muito para me ajudar na concentração e ter mais produtividade é a <b>Técnica Pomodoro</b>.

Não é o foco deste minicurso, mas eu escrevi um artigo sobre essa técnica. Se quiser saber mais clique no link abaixo e leia <strong>depois desta aula</strong>:

<b><a href="https://dicasdeprogramacao.com.br/melhore-sua-produtividade-com-a-tecnica-pomodoro/" target="_blank">Clique AQUI para conhecer a técnica pomodoro!</a></b>

Voltando ao curso, se não vai usar lápis e borracha e quiser utilizar um software para te ajudar a aprender programação. Neste minicurso vamos utilizar o Visualg para escrever códigos em português.

Na minha opinião o VisuAlg é a melhor IDE (Ambiente de desenvolvimento) para iniciantes em programação implementarem seus algoritmos.

O Visualg foi criado por um brasileiro (Claudio Morgado de Souza), é fácil de ser usado e compila pseudo-códigos escritos em português, também conhecidos como “Portugol”.
<h3>Instalando o Visualg no seu computador</h3>
A instalação do VisuAlg é muito simples e o software pode ser instalado em Windows 95 ou posterior. Para instalar o o Visualg basta baixá-lo através do link abaixo, extrair o executável e rodar. Pronto.

<b><a href="https://dicasdeprogramacao.com.br/download-visualg/" target="_blank">Clique AQUI para fazer o download do Visualg</a></b>

Obs: Quem usa linux, o Visualg funciona perfeitamente no Wine. Eu mesmo uso o Visualg no Linux.

<img style="margin: 5px 5px 5px 5px; width: 100%;" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/visualg-pagina-inicial.png" alt="Visualg" />

A tela do VisuAlg compõe-se da barra de menu, barra de tarefas, barra de ferramentas, do editor de textos (que toma toda a sua metade superior), do quadro de variáveis (no lado esquerdo da metade inferior), do simulador de saída (no correspondente lado direito) e da barra de status. O programa já inicia com o "esqueleto" de um algoritmo. Como você pode ver na figura acima.

O professor <strong>Antonio Carlos Nicolodi</strong> reformulou o Visualg e lançou a versão 3.0 com uma interface nova e algumas melhorias. Para este minicurso você pode usar a versão 3.0 ou a 2.5. Como você preferir.
<h2>Criando o seu primeiro programa!</h2>
Agora que você já tem o Visualg, é hora de criar o seu primeiro programa. O famoso "Hello World". Abra o visualg e escreva o algoritmo abaixo:

<img style="margin: 5px 5px 5px 5px; width: 100%;" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/Hello-World.png" alt="Hello World Visualg" />

Vamos entender esse primeiro programa que você criou.

1º Na primeira linha, nós colocamos o nome do algoritmo <b>"BoasVindas"</b>.

2º As quatro linhas seguintes são comentário, ou seja, é ignorado pelo compilador, não é um comando de algoritmo. Os comentários no Visualg começam com duas barras. Assim: //
<div style="margin: 5px 50px 5px 50px;">

<b>Nota para o iniciante</b>: Embora os comentários não sejam interpretados na hora de executar o programa, eles são muito importantes quando se escreve software, pois através dos comentários a gente explica o que uma parte do código faz para um outro programador que trabalhará neste mesmo código no futuro. Lembre-se: este programador pode ser você! É uma boa prática comentar códigos.

</div>
3º Em seguida vemos as declarações de variáveis. Nós declaramos uma variável chamada <b>nome</b> do tipo <b>CARACTERE</b>. Na próxima aula eu vou explicar o que é uma variável, mas por agora só entenda que nós podemos armazenar valores em uma variável.

4º O programa começa de fato após a cláusula <b>inicio</b>. Perceba que depois do início tem outro comentário.

5º A primeira coisa que fazemos no programa é escrever na tela para o usuário: <b>Olá! digite o seu nome:</b>

Nós fizemos isso através da função <b>ESCREVA</b>.

6º Na linha seguinte, nós capturamos o que o usuário digitou através da função <b>LEIA</b>. E armazenamos o texto que o usuário digitou na variável <b>nome</b>.

7º Por fim, nós mostramos na tela (novamente através da função <b>ESCREVA</b>): <b>Seja bem vindo (o valor da variável nome)!</b>

Note que nós juntamos ao texto <b>Seja bem vindo</b> o valor da variável nome. Se o usuário digitou <b>José</b> o programa vai exibir na tela: <b>Seja bem vindo José!</b>

Veja na imagem abaixo como acontece a execução do programa que acabamos de criar.

<img src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/resultado-algoritmo_basico.png" alt="resultado algoritmo básico" />
<h2>Entendendo o algoritmo da multiplicação</h2>
Agora que você criou o seu primeiro programa, vamos tentar entender aquele algoritmo da Multiplicação que eu falei no começo da aula de hoje. Antes vamos implementá-lo no Visualg.

<img src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/algoritmo_multiplicacao.png" alt="algoritmo de multiplicação" />

Para entender o algoritmo, é importante definir algumas coisas:

&nbsp;
<ul>
	<li><b>Variável</b> é um espaço alocado na memória para armazenar dados. No algoritmo, foram criadas 4 variáveis: <b>numero1</b>, <b>numero2</b>, <b>resultado</b> e <b>contador</b></li>
	<li>O símbolo “:=” representa uma atribuição de valor a uma variável. Por exemplo, (<b>resultado := resultado + numero1</b>) atribui à variável resultado, o valor da própria variável resultado, acrescido do valor da variável numero1.</li>
	<li>O comando <b>leia(numero1)</b>, significa que o algoritmo está lendo o que o usuário digita e armazenando na variável <b>numero1</b>.</li>
	<li>O comando <b>ENQUANTO</b> é uma estrutura de controle de fluxo do tipo “Estrutura de repetição”. Vamos ver isso na aula 5 deste minicurso.</li>
</ul>
&nbsp;

Vamos ver qual seria o resultado da execução deste algoritmo?

<img src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/resultado_algoritmo_multiplicacao.png" alt="resultado do algoritmo de multiplicação" />

Este algoritmo eu não vou explicar aqui. Preferi dar as informações que você precisava para entender. Você precisa se esforçar um pouco pra entender o algoritmo.

Se você não conseguiu entender este algoritmo da multiplicação, não se preocupe, tem coisa nele que eu ainda vou explicar. Mas já dá pra você ter uma ideia de como um algoritmo funciona, como eu transferi a forma de resolver o problema da multiplicação da maneira que eu sei fazer, porque aprendi quando criança, para o computador resolver sozinho.

Por hoje é só.

Mas eu queria deixar um exercício para você fazer ...

Quero que você escreva um algoritmo para calcular a média de um aluno através de suas 4 notas no ano letivo.

Ou seja, o algoritmo precisa ler as quatro notas que o usuário digitar, calcular a média e exibir na tela para o usuário.

Vou dar a resposta na próxima aula, mas é muito importante que você tente fazer este exercício sozinho. Com o que você aprendeu até agora, você já é capaz de resolver este exercício.

Na próxima aula (você receberá por e-mail) vamos começar a fazer os nossos programas tomarem decisões.

Enquanto isso, tente praticar criando alguns algoritmos básicos. As dificuldades no primeiro contato com programação é normal, mas nesse minicurso você vai aprender como superar isso fazendo exercícios.

Aprender lógica de programação é como aprender matemática. Tem que praticar!

Nos vemos na próxima aula!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>38</wp:post_id>
		<wp:post_date><![CDATA[2015-05-30 00:03:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-30 00:03:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[minicurso-2-criando-os-primeiros-programas]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[page-lesson.php]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Verifique seu e-mail</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/verifique-seu-e-mail/</link>
		<pubDate>Sat, 30 May 2015 14:56:38 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/?page_id=43</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align: center;"><img class="alignnone" src="https://dicasdeprogramacao.com.br/wp-content/uploads/2013/03/Logo2.png" alt="" width="390" height="83" /></p>

<h1 style="text-align: center; font-size: 50px;">Espere Um Minuto ...</h1>
<h2 style="text-align: center;">Você precisa confirmar o seu e-mail.</h2>
<h3 style="text-align: center;">Passo 1</h3>
<p style="text-align: center;">Acesse a sua caixa de entrada. Se preferir pode acessar algum dos links abaixo.</p>

<h4 style="text-align: center;"><a href="http://gmail.com" target="_blank">Acessar Gmail</a></h4>
<h4 style="text-align: center;"><a href="http://login.live.com/" target="_blank">Acessar Hotmail</a></h4>
<h4 style="text-align: center;"><a href="http://login.yahoo.com/" target="_blank">Acessar Yahoo</a></h4>
<h3 style="text-align: center;">Passo 2</h3>
<p style="text-align: center;">Procure pela mensagem com o nome: <strong>Gustavo { Dicas de Programação }.</strong></p>
<p style="text-align: center;">Obs: O e-mail de confirmação pode demorar alguns minutos para chegar a sua caixa de entrada. <strong>Caso demore muito para o e-mail chegar verifique a sua caixa de SPAM!</strong></p>

<h3 style="text-align: center;">Passo 3</h3>
<p style="text-align: center;">Clique no <strong>link</strong> dentro dessa mensagem.</p>

<h2 style="text-align: center;">IMPORTANTE!</h2>
<p style="text-align: center;">Adicione o e-mail: <strong>gustavo@dicasdeprogramacao.com.br</strong> aos seus contatos para evitar que os e-mails caiam na caixa de spam.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date><![CDATA[2015-05-30 14:56:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-30 14:56:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[verifique-seu-e-mail]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_51e6eb641b0a3f3327051878bfe39f37]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Assinatura confirmada</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/assinatura-confirmada/</link>
		<pubDate>Sat, 30 May 2015 16:50:18 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/?page_id=57</guid>
		<description></description>
		<content:encoded><![CDATA[<center><img class="aligncenter" src="https://dicasdeprogramacao.com.br/wp-content/uploads/2013/03/Logo2.png" alt="" width="390" height="83" /></center>
<h1 class="entry-title" style="font-size: 50px; text-align: center;">ASSINATURA CONFIRMADA!</h1>
<p style="text-align: center;">Sua assinatura foi confirmada! É uma honra ter você participando do minicurso de lógica de programação.</p>

<h2 style="text-align: center; padding-top:30px;"></h2>
<h2 style="text-align: center;">Aqui estão os próximos passos:</h2>
<h3 style="text-align: center; padding-top:40px;">Passo 1: Acesse a 1ª lição do minicurso 100% grátis</h3>
<p style="text-align: center;">Basta clicar no botão abaixo para acessar a lição 1 do minicurso de lógica de programação.</p>
<p style="text-align: center;font-size:20px;"><strong><a class="btn btn-success navbar-btn" href="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-1-porque-aprender-programacao/" target="_blank">Lição 1/10 - Por que aprender programação?</a></strong></p>

<h3 style="text-align: center; padding-top:40px;">Passo 2: Compartilhe este curso 100% grátis com seus amigos</h3>
<p style="text-align: center;">Basta clicar nos botões abaixo para compartilhar o curso 100% grátis com seus amigos.</p>

<center>
<table style="text-align:center;"><tr style="border: 30px solid white;">
<td style="border: 30px solid white;"><a class="btn btn-twitter btn-block" href="http://ctt.ec/4Rq9f" target="_blank"><i class="fa fa-twitter"></i> | Divulge no Twitter!</a></td>
<td style="border: 30px solid white;"><a class="btn btn-facebook btn-block" href="http://www.facebook.com/sharer.php?u=https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/" target="_blank"><i class="fa fa-facebook"></i> | Compartilhe no Facebook!</a></td></tr><tr>
<td style="border: 30px solid white;"><a class="btn btn-google-plus btn-block" href="https://plus.google.com/share?url=https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/" target="_blank"><i class="fa fa-google-plus"></i> | Compartilhe no Google+!</a></td>
<td style="border: 30px solid white;"><a class="btn btn-linkedin btn-block" href="https://www.linkedin.com/cws/share?url=https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/" target="_blank"><i class="fa fa-linkedin"></i> | Compartilhe no LinkedIn!</a></td>
</tr>
</table>
</center>
<p style="text-align: center;">(Você ainda poderá editar a mensagem antes de publicá-la.)</p>

<h3 style="text-align: center; padding-top:40px;">Passo 3: Siga o { Dicas de Programação } nas Redes Sociais</h3>
<p style="text-align: center;">Receba informações exclusivas. Siga o <strong>{ Dicas de Programação }</strong> clicando nos botões abaixo.</p>

<center>
<table style="text-align:center;"><tr style="border: 30px solid white;">
<td style="border: 30px solid white;"><a class="btn btn-twitter btn-block" href="https://twitter.com/dicasprog" target="_blank"><i class="fa fa-twitter"></i> | Twitter!</a></td>
<td style="border: 30px solid white;"><a class="btn btn-facebook btn-block" href="https://www.facebook.com/pages/Dicas-de-Programa%C3%A7%C3%A3o/124525944396823"  target="_blank"><i class="fa fa-facebook"></i> | Facebook!</a></td>
<td style="border: 30px solid white;"><a class="btn btn-google-plus btn-block" href="http://google.com/+DicasdeprogramacaoBr" target="_blank"><i class="fa fa-google-plus"></i> | Google+!</a></td></tr><tr>
<td><a href="https://twitter.com/dicasprog" target="_blank">Twitter</a></td>
<td><a href="https://www.facebook.com/pages/Dicas-de-Programa%C3%A7%C3%A3o/124525944396823"  target="_blank">Facebook</a></td>
<td><a href="http://google.com/+DicasdeprogramacaoBr" target="_blank">Google+</a></td>
</tr>
</table>
</center>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>57</wp:post_id>
		<wp:post_date><![CDATA[2015-05-30 16:50:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-30 16:50:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[assinatura-confirmada]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_ccdff2a9dbfd431e321d9076add2328e]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_51e6eb641b0a3f3327051878bfe39f37]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Aula 3/10 - Variáveis, constantes e tipos de dados</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-3-variaveis-constantes-operadores-e-tipos-de-dados/</link>
		<pubDate>Sat, 30 May 2015 20:51:21 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/?page_id=135</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Aula (3/10) Variáveis, constantes e tipos de dados</h1>
Quando começamos a nos aventurar neste mundo da programação, cometemos muitos erros básicos que podem ser evitados se aprendermos alguns conceitos básicos.

Na aula de hoje você vai aprender:
<ul>
	<li>O que são variáveis e constantes.</li>
	<li>Os tipos de dados que podemos usar em cada variável/constante.</li>
</ul>
Entender esses assuntos é muito importante para você mergulhar de cabeça no fantástico mundo da programação. Vamos lá?

<span style="text-decoration: underline;">Leitura de aproximadamente 10 minutos</span>
<h2>O que são variáveis e constantes?</h2>
Programas de computador utilizam os recursos de hardware mais básicos para executar <a title="O que é Algoritmo?" href="https://dicasdeprogramacao.com.br/o-que-e-algoritmo/" target="_blank">algoritmos</a>. Enquanto o processador executa os cálculos, a memória é responsável por armazenar dados e servi-los ao processador.

<img style="float: right; margin: 5px 5px 5px 30px;" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/variável.jpg" alt="variável" width="249" height="202" />O recurso que nós utilizamos em nossos programas para escrever e ler dados da memória do computador é conhecido como <strong>variável</strong>, que é simplesmente <strong>um espaço na memória o qual reservamos e damos um nome</strong>. Por exemplo, podemos criar uma variável chamada “idade” para armazenar a idade de uma pessoa.

Você pode imaginar uma variável como uma gaveta “etiquetada” em um armário.

Chamamos este espaço alocado na memória de <strong>variável</strong>, porque o valor armazenado neste espaço de memória pode ser alterado ao longo do tempo, ou seja, o valor ali alocado é “variável” ao longo do tempo. Diferente das <strong>constantes</strong>, que é um espaço reservado na memória para armazenar um valor que não muda com o tempo. Por exemplo, o valor PI (3.14159265359…) que nunca vai mudar!
<h3>Como funciona uma variável em um algoritmo</h3>
Para não restar dúvidas quanto ao funcionamento de uma variável, vamos ver como elas funcionam em um algoritmo.
<blockquote>Algoritmo <strong>Teste de Variável
</strong><strong>Declaração das variáveis</strong>
nome : Texto
<strong>Inicio</strong>
nome &lt;- “João”
imprimir(nome)
nome &lt;- “Maria”
imprimir(nome)
<strong>Fim</strong></blockquote>
Neste algoritmo, declaramos uma variável chamada <em>nome</em> do tipo “Texto”. Inicialmente armazenamos o texto “João” na variável nome, e mandamos imprimir na tela o valor desta variável. Neste momento aparece na tela o texto “João”, em seguida alteramos o valor da variável para “Maria” neste momento o texto “João” é apagado da variável (memória) e em seu lugar é armazenado o texto “Maria”. Em seguida, mandamos imprimir na tela novamente o valor da variável, então aparece na tela o texto “Maria”.

Percebeu como o valor da variável <em>nome</em> pode ser alterado com o tempo?
<h2>Tipos de dados</h2>
Para otimizar a utilização da memória, nós definimos um tipo de dados para cada variável. <img style="float: left; margin: 5px 30px 5px 5px;" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/tipos-de-dados.jpg" alt="tipos-de-dados" width="229" height="220" />Por exemplo, a variável <em>nome</em>, deve armazenar textos, já a variável <em>idade</em> deve armazenar apenas números inteiros (sem casa decimal), na variável <em>sexo</em> podemos armazenar apenas um caractere (“M” ou “F”). Seria correto armazenarmos o valor “M” na variável <em>idade</em>? Não né? Por isso devemos especificar em nossos algoritmos o tipo de cada variável.

Podemos classificar os tipos de dados em basicamente duas categorias, os tipos de dados primitivos e os tipos de dados customizados.
<h3>Tipos de dados primitivos</h3>
Existem quatro tipos de dados primitivos, algumas linguagens subdividem estes tipos de dados em outros de acordo com a capacidade de memória necessária para cada variável, mas no geral, os tipos de dados primitivos são:
<ul>
	<li><strong>INTEIRO:</strong> Este é o tipo de dados para valores numéricos negativos ou positivos, sem casas decimais. Por exemplo uma variável <em>idade</em>.</li>
	<li><strong>REAL:</strong> Este é o tipo de dados para valores numéricos negativos ou positivos, com casas decimais. Por exemplo uma variável <em>peso</em>.</li>
	<li><strong>LÓGICO:</strong> Este tipo de dados pode assumir apenas dois valores VERDADEIRO ou FALSO. Também é conhecido como <strong>booleano</strong>. Reserva apenas um bit na memória, onde o valor 1 representa VERDADEIRO e o valor 0 representa FALSO. Por exemplo uma variável <em>status_da_lâmpada</em> (acesa ou apagada).</li>
	<li><strong>TEXTO:</strong> Tipo de dados para variáveis que armazenam textos. Por exemplo uma variável <em>nome</em>.</li>
</ul>
Algumas linguagens de programação dividem esses tipos primitivos de acordo com o espaço necessário para os valores daquela variável. Na linguagem Java por exemplo, o tipo de dados inteiro é dividido em 4 tipos primitivos: byte, short, int e long. A capacidade de armazenamento de cada um deles é diferente.
<ul>
	<li><strong>byte</strong>: é capaz de armazenar valores entre -128 até 127.</li>
	<li><strong>short</strong>: é capaz de armazenar valores entre – 32768 até 32767.</li>
	<li><strong>int</strong>: é capaz de armazenar valores entre –2147483648 até 2147483647.</li>
	<li><strong>long</strong>: é capaz de armazenar valores entre –9223372036854775808 até 9223372036854775807.</li>
</ul>
Mas essa divisão é uma particularidade da linguagem de programação. O objetivo é otimizar a utilização da memória. Em algumas linguagens de programação não é necessário especificar o tipo de dados da variável, eles são identificados dinamicamente. Porém, é necessário informar o tipo de dados de cada variável em algoritmos.
<h3>Tipos de dados customizados</h3>
A partir dos tipos de dados primitivos podemos criar outros tipos de dados utilizando uma combinação de variáveis. São estruturas de dados, classes, vetores, matrizes, etc.

<img style="float: right; margin: 5px 5px 5px 30px;" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/classe-carro.jpg" alt="classe-carro" width="221" height="228" />Por exemplo, uma classe chamada <em>Carro</em> é um tipo de dados que agrupa outras variáveis básicas como <strong>marca</strong>, <strong>cor</strong>, <strong>ano</strong>, <strong>modelo</strong>, etc. Um <em>vetor</em> é um agrupamento de variáveis do mesmo tipo, uma <em>matriz</em> é um agrupamento de vetores. Enfim, a base de todos os tipos de dados são os tipos de dados primitivos, independente da linguagem de programação.

Claro, em <strong>Programação Orientada a Objetos</strong> há todo um conceito para a criação de <em>classes</em> que, além de <em>atributos</em> também tem <em>operações</em>, o estudo de <em>estruturas de dados</em> também vai muito além de apenas formar tipos de dados a partir de outros. Mas não se preocupe com isso por agora. Apenas entenda que são tipos de dados formatos a partir de outros tipos de dados.

Diferente dos tipos de dados primitivos que já são implementados internamente pelas linguagens de programação, esses tipos de dados são criados pelo programador.

Espero que você tenha entendido esses dois assuntos, pois saber como funcionam as variáveis/constantes e os tipos de dados é de suma importância para você se tornar um bom programador.
<h2>Solução do exercício da aula #2</h2>
No final da aula passada eu pedi pra você tentar fazer um exercício. Se não conseguiu fazê-lo, não tem problema.

Eu pedi para você solicitar 4 a notas do usuário, calcular a média e a presentar na tela. Nesta aula você aprendeu sobre variáveis e os tipos de dados. Para resolver este exercício você precisará criar 5 variáveis do tipo real, 4 variáveis para armazenar as notas e uma para armazenar a média.

Em seguida nós devemos solicitar ao usuário que digite as notas e armazená-las nas respectivas variáveis.

O passo seguinte é o cálculo da média, ou seja, a soma das 4 notas dividido por 4. Reparece que precisamos colocar as somas entre parênteses, pois os operadores de multiplicação e divisão têm precedência quanto aos operadores de soma e subtração. Você vai aprender um pouco mais sobre os operadores na próxima aula.

O resultado do cálculo é armazenado na variável "media".

Por fim, apresentamos a média na tela para o usuário.
<pre class="lang:default decode:true">algoritmo "MédiaAnoLetivo"
var
   nota1, nota2, nota3, nota4, media : real
inicio
   escreva("Digite a primeira nota para o calculo da media: ")
   leia(nota1)
   escreva("Digite a segunda nota para o calculo da media: ")
   leia(nota2)
   escreva("Digite a terceira nota para o calculo da media: ")
   leia(nota3)
   escreva("Digite a quarta nota para o calculo da media: ")
   leia(nota4)
   
   media &lt;- ( nota1 + nota2 + nota3 + nota4 ) / 4
   
   escreva("A sua média é: ", media)
fimalgoritmo</pre>
Apresento abaixo o resultado da execução deste algoritmo.

<img class="aligncenter size-full wp-image-460" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/resultado-media.png" alt="resultado media" width="681" height="462" />
<h2>Continuando o minicurso</h2>
Na próxima aula você vai aprender sobre os três tipos de operadores que são utilizados em programação. Ok?

Mas antes Deixo um exercício para você pensar. Olhe para qualquer objeto que esteja perto de você e identifique as suas características, para cada uma delas pense no tipo de dados que você utilizaria se fosse utilizar essa informação no seus software.

Por exemplo, estou olhando agora para o meu notebook e identifico algumas características nele, ele tem cor (texto), teclas (caracteres), botões de mouse para click (booleano, ou seja, pode ter dois estados "clicado" ou "não clicado"), tela (acesa ou apagada), wifi (lidado ou desligado), etc.

Esse é um exercício mental que vai facilitar a sua visão sobre manipulação de dados nos seus algoritmos.

Até a próxima aula!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>135</wp:post_id>
		<wp:post_date><![CDATA[2015-05-30 20:51:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-30 20:51:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[minicurso-3-variaveis-constantes-operadores-e-tipos-de-dados]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[page-lesson.php]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Aula 4/10 - Operadores</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-4-operadores/</link>
		<pubDate>Tue, 02 Jun 2015 00:48:33 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/?page_id=192</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Aula (4/10) Operadores</h1>
Evidentemente você já resolveu alguma expressão matemática na escola. Lembra quando o professor pedia pra gente resolver aquelas expressões enormes? Cheia de números e <em>operadores</em> de somar, subtrair, multiplicar, etc. Sem falar das raízes e exponenciais. Sei que muita gente vai ter um arrepio só de lembra disso. rs

Vamos ficar no basicão ... Você sabe que na expressão <strong>2 + 2</strong> o sinal <strong>+</strong> é um operador que representa a soma. Certo? Também sabe que essa expressão resulta apenas um valor (4). Confirma? Então, você já entendeu o sentido dos <em>operadores</em>. <strong>Relacionar valores para resultar um outro valor.</strong>.

Existem 3 tipos de <em>operadores</em>: <strong>Aritméticos</strong>, <strong>Lógicos</strong> e <strong>Relacionais</strong>.

Entender como funciona cada operador é MUITO importante para aprender programação. Claro que, a representação simbólica de alguns operadores muda de acordo com a linguagem, mas a essência é a mesma. <strong>Todas as linguagens de programação usam operadores</strong>.

Vamos ver um pouquinho sobre cada tipo de operadores.

<span style="text-decoration: underline;">Leitura de aproximadamente 25 minutos</span>
<h3>Operadores Aritméticos</h3>
<img style="float: right; margin: 5px 5px 5px 30px;" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/operadores-aritméticos-300x169.jpg" alt="operadores-aritméticos" width="300" height="169" />Esses são os mais fáceis! Aprendemos na escola fundamental. Em programação, esses operadores são tão simples quanto você aprendeu na escola. Apenas alguns que você pode não conhecer.

Além dos mais simples (soma "+", subtração "-", multiplicação "*" e divisão "/"), dois outros operadores aritméticos não recebem muita atenção e pode ser que você não os conheça, eles são o <strong>div</strong> e o <strong>mod</strong>, que resultam, respectivamente, o quociente (a parte inteira do resultado da divisão) e o resto da divisão. Observe as operações abaixo:
<blockquote>14 / 4 = 3,5
14 <strong>div</strong> 4 = 3
14 <strong>mod</strong> 4 = 2</blockquote>
O operador mod em muitas linguagens de programação (java por exemplo) é representado pelo símbolo “%“, assim:
<blockquote>14 <strong>%</strong> 4 = 2</blockquote>
Uma das maiores utilizações do operador <strong>mod</strong> é para verificar se um número é <em>par</em> ou <em>ímpar</em>. Quando o número "<strong>mod</strong>" 2 resulta 0, ele é par, caso contrário, é ímpar. Veja.
<blockquote>14 <strong>mod</strong> 2 = 0 <strong>14 é par</strong>
15 <strong>mod</strong> 2 = 1 <strong>15 é ímpar</strong></blockquote>
Um outro operador aritmético que existe em algumas linguagens de programação é o ^ e executa a operação de potência, mas geralmente essa operação é realizada através de uma função chamada <strong>pow</strong>, bem como a operação de radiciação (função <strong>sqrt</strong>). Veja um exemplo do operador ^:
<blockquote>2 ^ 5 = 32 (dois elevado a cinco)</blockquote>
Operadores aritméticos de radiciação também são fornecidos por algumas linguagens de programação, mas esses são bem mais raros. O Postgres por exemplo oferece os símbolos <strong>|/</strong> e <strong>||/</strong> para operações de raiz quadrada e raiz cúbica, respectivamente.
<h4>Precedência entre os operadores</h4>
Da mesma forma que na matemática, os operadores de multiplicação e divisão têm precedência de execução em relação aos operadores de soma e subtração. Aliás se tiver parênteses na expressão estes têm precedência ainda maior.

Os operadores de mesma prioridade são interpretados da esquerda para a direita. Para exemplificar essa questão de precedência, observe a solução da expressão abaixo:
<blockquote>5 + 3 * <strong>( 3 – 1 )</strong> – 2 ^ 5 / 4 – 1
5 + 3 * 2 – <strong>2 ^ 5</strong> / 4 – 1
5 + <strong>3 * 2</strong> – 32 / 4 – 1
5 + 6 – <strong>32 / 4</strong> – 1
<strong>5 + 6</strong> – 8 – 1
<strong>11 – 8</strong> – 1
<strong>3 – 1</strong>
2</blockquote>
<h3>Operadores Lógicos</h3>
Lembra dos tipos de dados &lt;em&lt;lógico que falei um pouco acima nesta aula? Viu que dentre os tipos de dados tinha o tipo <strong>lógico</strong>? Então, enquanto os operadores aritméticos trabalha com números, os operadores lógicos trabalha com dados <strong>lógicos</strong>, ou <strong>booleanos</strong>.

A ideia dos operadores continua é a mesma: <strong>Relacionar valores para resultar um outro valor.</strong>. Isso significa que os operadores lógicos relacionam valores lógicos (verdadeiro/falso, 1/0, aceso/apagado, ligado/desligado, true/false, sim/não, etc.) e o resultado de uma expressão lógica também é outro valor lógico. Simples assim!

Vamos conhecer os operadores lógicos ... Enquanto os operadores aritméticos (que você conhece muito bem) são +, -, *, /, mod e div, os operadores lógicos são: E, OU, NÃO, NÃO-E, NÃO-OU, OU-EXCLUSIVO e NÃO-OU-EXCLUSIVO. Não é difícil, basta você acostumar (praticando) com esses operadores. Vamos ver como funciona cada um desses ...
<h4>Operador E(AND)</h4>
<img style="float: right; margin: 5px 5px 5px 30px;" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/portas-lógicas-AND.jpg" alt="portas-lógicas-AND" width="233" height="117" />
O Operador “E” ou “AND” resulta em um valor VERDADEIRO se os dois valores de entrada da operação forem VERDADEIROS, caso contrário o resultado é FALSO. Abaixo a <strong>tabela-verdade</strong> da operação E.
<table class="table">
<tbody>
<tr>
<td><strong>VALOR 1</strong></td>
<td><strong>VALOR 2</strong></td>
<td><strong>OPERAÇÃO E</strong></td>
</tr>
<tr>
<td><strong>VERDADEIRO</strong></td>
<td><strong>VERDADEIRO</strong></td>
<td><strong>VERDADEIRO</strong></td>
</tr>
<tr>
<td>VERDADEIRO</td>
<td>FALSO</td>
<td>FALSO</td>
</tr>
<tr>
<td>FALSO</td>
<td>VERDADEIRO</td>
<td>FALSO</td>
</tr>
<tr>
<td>FALSO</td>
<td>FALSO</td>
<td>FALSO</td>
</tr>
</tbody>
</table>
<h4>Operador OU(OR)</h4>
<img style="float: right; margin: 5px 5px 5px 30px;" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/portas-lógicas-OR.jpg" alt="portas-lógicas-AND" width="233" height="117" />
O Operador “OU” ou “OR” resulta em um valor VERDADEIRO se ao menos UM dos dois valores de entrada da operação for VERDADEIRO, caso contrário o resultado é FALSO. Abaixo a <strong>tabela-verdade</strong> da operação OU.
<table class="table">
<tbody>
<tr>
<td><strong>VALOR 1</strong></td>
<td><strong>VALOR 2</strong></td>
<td><strong>OPERAÇÃO OU</strong></td>
</tr>
<tr>
<td><strong>VERDADEIRO</strong></td>
<td><strong>VERDADEIRO</strong></td>
<td><strong>VERDADEIRO</strong></td>
</tr>
<tr>
<td><strong>VERDADEIRO</strong></td>
<td>FALSO</td>
<td><strong>VERDADEIRO</strong></td>
</tr>
<tr>
<td>FALSO</td>
<td><strong>VERDADEIRO</strong></td>
<td><strong>VERDADEIRO</strong></td>
</tr>
<tr>
<td>FALSO</td>
<td>FALSO</td>
<td>FALSO</td>
</tr>
</tbody>
</table>
<h4>Operador NÃO(NOT)</h4>
<img style="float: right; margin: 5px 5px 5px 30px;" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/portas-lógicas-NOT.jpg" alt="portas-lógicas-AND" width="233" height="117" />
O Operador “NÃO” ou “NOT” é o único operador que recebe como entrada apenas um valor, e sua função é simplesmente inverter os valores. Ou seja, se o valor de entrada for VERDADEIRO, o resultado será FALSO e se o valor de entrada for FALSO, o resultado será VERDADEIRO. Abaixo a <strong>tabela-verdade</strong> da operação NÃO.
<table class="table">
<tbody>
<tr>
<td><strong>VALOR DE ENTRADA</strong></td>
<td><strong>OPERAÇÃO NÃO</strong></td>
</tr>
<tr>
<td><strong>VERDADEIRO</strong></td>
<td>FALSO</td>
</tr>
<tr>
<td>FALSO</td>
<td><strong>VERDADEIRO</strong></td>
</tr>
</tbody>
</table>
<h4>Operador NÃO-E(NAND)</h4>
<img style="float: right; margin: 5px 5px 5px 30px;" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/portas-lógicas-NAND.jpg" alt="portas-lógicas-AND" width="233" height="117" />
O Operador “NÃO-E” ou “NAND” é o contrário do operador E (AND), ou seja, resulta em VERDADEIRO, se ao menos um dos dois valores for FALSO, na verdade este é o operador E (AND) seguido do operador NÃO (NOT). Abaixo a <strong>tabela-verdade</strong> da operação NÃO-E.
<table class="table">
<tbody>
<tr>
<td><strong>VALOR 1</strong></td>
<td><strong>VALOR 2</strong></td>
<td><strong>OPERAÇÃO NAND</strong></td>
</tr>
<tr>
<td>VERDADEIRO</td>
<td>VERDADEIRO</td>
<td>FALSO</td>
</tr>
<tr>
<td>VERDADEIRO</td>
<td><strong>FALSO</strong></td>
<td><strong>VERDADEIRO</strong></td>
</tr>
<tr>
<td><strong>FALSO</strong></td>
<td>VERDADEIRO</td>
<td><strong>VERDADEIRO</strong></td>
</tr>
<tr>
<td><strong>FALSO</strong></td>
<td><strong>FALSO</strong></td>
<td><strong>VERDADEIRO</strong></td>
</tr>
</tbody>
</table>
<h4>Operador NÃO-OU(NOR)</h4>
<img style="float: right; margin: 5px 5px 5px 30px;" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/pórtas-lógicas-NOR.jpg" alt="portas-lógicas-AND" width="233" height="117" />
O Operador “NÃO-OU” ou “NOR” é o contrário do operador OU (OR), ou seja, resulta em VERDADEIRO, se os dois valores forem FALSO, na verdade este é o operador OU (OR) seguido do operador NÃO (NOT). Abaixo a <strong>tabela-verdade</strong> da operação NÃO-OU.
<table class="table">
<tbody>
<tr>
<td><strong>VALOR 1</strong></td>
<td><strong>VALOR 2</strong></td>
<td><strong>OPERAÇÃO NOR</strong></td>
</tr>
<tr>
<td>VERDADEIRO</td>
<td>VERDADEIRO</td>
<td>FALSO</td>
</tr>
<tr>
<td>VERDADEIRO</td>
<td>FALSO</td>
<td>FALSO</td>
</tr>
<tr>
<td>FALSO</td>
<td>VERDADEIRO</td>
<td>FALSO</td>
</tr>
<tr>
<td><strong>FALSO</strong></td>
<td><strong>FALSO</strong></td>
<td><strong>VERDADEIRO</strong></td>
</tr>
</tbody>
</table>
<h4>Operador OU-EXCLUSIVO(XOR)</h4>
<img style="float: right; margin: 5px 5px 5px 30px;" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/portas-lógicas-XOR.jpg" alt="portas-lógicas-AND" width="233" height="117" />
O Operador “OU-EXCLUSIVO” ou “XOR” é uma variação interessante do operador OU (OR), ele resulta em VERDADEIRO se apenas um dos valores de entrada for VERDADEIRO, ou seja, apenas se os valores de entrada forem DIFERENTES. Abaixo a <strong>tabela-verdade</strong> da operação OU-EXCLUSIVO.
<table class="table">
<tbody>
<tr>
<td><strong>VALOR 1</strong></td>
<td><strong>VALOR 2</strong></td>
<td><strong>OPERAÇÃO XOR</strong></td>
</tr>
<tr>
<td>VERDADEIRO</td>
<td>VERDADEIRO</td>
<td>FALSO</td>
</tr>
<tr>
<td><strong>VERDADEIRO</strong></td>
<td>FALSO</td>
<td><strong>VERDADEIRO</strong></td>
</tr>
<tr>
<td>FALSO</td>
<td><strong>VERDADEIRO</strong></td>
<td><strong>VERDADEIRO</strong></td>
</tr>
<tr>
<td>FALSO</td>
<td>FALSO</td>
<td>FALSO</td>
</tr>
</tbody>
</table>
<h4>Operador NÃO-OU-EXCLUSIVO(XNOR)</h4>
<img style="float: right; margin: 5px 5px 5px 30px;" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/portas-lógicas-XNOR.jpg" alt="portas-lógicas-AND" width="233" height="117" />
O Operador “NÃO-OU-EXCLUSIVO” ou “XNOR” é o contrário do operador OU-EXCLUSIVO (XOR), ou seja, resulta VERDADEIRO se os valores de entrada forem IGUAIS. Observe a tabela abaixo:
<table class="table">
<tbody>
<tr>
<td><strong>VALOR 1</strong></td>
<td><strong>VALOR 2</strong></td>
<td><strong>OPERAÇÃO XNOR</strong></td>
</tr>
<tr>
<td><strong>VERDADEIRO</strong></td>
<td><strong>VERDADEIRO</strong></td>
<td><strong>VERDADEIRO</strong></td>
</tr>
<tr>
<td>VERDADEIRO</td>
<td>FALSO</td>
<td>FALSO</td>
</tr>
<tr>
<td>FALSO</td>
<td>VERDADEIRO</td>
<td>FALSO</td>
</tr>
<tr>
<td><strong>FALSO</strong></td>
<td><strong>FALSO</strong></td>
<td><strong>VERDADEIRO</strong></td>
</tr>
</tbody>
</table>
<h4>Operadores lógicos em programação</h4>
Cada linguagem de programação tem uma forma de representar os operadores lógicos. A simbologia mais encontrada são:
<ul>
	<li><strong>AND</strong>, <strong>OR</strong> e <strong>NOT</strong> em linguagens como: Pascal, Visual Basic e SQL.</li>
	<li><strong>&amp;&amp;</strong>, <strong>||</strong> e <strong>!</strong> em linguagens como: Java e C#</li>
</ul>
No nosso caso, criando algoritmos em português, os operadores lógicos são E, OU, etc. Por exemplo.
<blockquote>VERDADEIRO <strong>E</strong> FALSO = FALSO</blockquote>
Algumas linguagens oferecem operadores lógicos para o nível de bit (também chamado de operadores bitwise). Ou seja, podemos fazer operações lógicas com os bits de dois números. Em java, por exemplo esses operadores são &amp; e |. Veja o código abaixo escrito em java.
<pre class="lang:java decode:true ">public class TesteBitwise {
	public static void main (String []a){
		System.out.println("10 &amp; 7 = " + (10 &amp; 7));
		System.out.println("10 | 7 = " + (10 | 7));
	}
}</pre>
Abaixo o resultado deste programa.

<img src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/resultado-bitwise.png" alt="resultado-bitwise" />

Essas operações lógicas são realizadas com os bits dos números de entrada. Assim:
<blockquote>Convertemos o número 10 e o número 7 para binário:
10 = 1010 em binário
7 = 0111 em binário
depois realizamos as operações lógicas com cada bit dos dois números. Da direita para a esquerda aplicamos as operações lógicas para cada big.

0 E 1 = 0
1 E 1 = 1
0 E 1 = 0
1 E 0 = 0

Logo,

10 &amp; 7 = 0010 = 2 em números decimais.

O mesmo para o operador OU:

0 OU 1 = 1
1 OU 1 = 1
0 OU 1 = 1
1 OU 0 = 1

Logo,

10 | 7 = 1111 = 15</blockquote>
Não é o foco aqui deste minicurso, essa parte das operações em nível de bit foi só para curiosidade. Você não precisa saber fazer conversões de bases numéricas para aprender lógica de programação, mas se quiser aprender um pouco mais sobre isso, leia este post que escrevi no blog <strong>{ Dicas de Programação }</strong>:

<a href="https://dicasdeprogramacao.com.br/as-10-conversoes-numericas-mais-utilizadas-na-computacao/" target="_blank">As 10 conversões numéricas mais utilizadas na computação</a>
<h3>Operadores Relacionais</h3>
Operadores relacionais são utilizados para comparar valores, o resultado de uma expressão relacional é um valor booleano (VERDADEIRO ou FALSO). Os operadores relacionais são: <strong>igual</strong>, <strong>diferente</strong>, <strong>maior</strong>, <strong>menor</strong>, <strong>maior ou igual</strong>, <strong>menor ou igual</strong>.

Não é necessário explicar cada um, pois eles são auto-explicativos. Mas para quem é iniciante em desenvolvimento de softwares algumas informações podem ser importantes, principalmente pelo fato de haver diferença entre linguagens de programação.

Os operadores relacionais são diferente dependendo da linguagem de programação, mas conhecendo os símbolos mais comuns, a maioria da linguagens de programação fica mais fácil aprender. No <a href="https://dicasdeprogramacao.com.br/download-visualg/" target="_blank">VisuAlg</a>, os símbolos dos operadores relacionais são: =, &lt;&gt;, &gt;, &lt;, &gt;=, &lt;=. Vamos testar esses operadores no Visualg com o algoritmo abaixo.
<pre class="toolbar-overlay:false lang:default decode:true highlight:0">algoritmo "TesteOperadoresRelacionais"
var
  numero1 : INTEIRO
  numero2 : INTEIRO
  resultado : LOGICO
inicio
 
      numero1 := 5
      numero2 := 3
      resultado := numero1 = numero2
      ESCREVAL (numero1, " =  ", numero2, "? ", resultado)
      resultado := numero1 &lt;&gt; numero2
      ESCREVAL (numero1, " &lt;&gt; ", numero2, "? ", resultado)
      resultado := numero1 &gt; numero2
      ESCREVAL (numero1, " &gt;  ", numero2, "? ", resultado)
      resultado := numero1 &lt; numero2
      ESCREVAL (numero1, " &lt;  ", numero2, "? ", resultado)
      resultado := numero1 &gt;= numero2
      ESCREVAL (numero1, " &gt;= ", numero2, "? ", resultado)
      resultado := numero1 &lt;= numero2
      ESCREVAL (numero1, " &lt;= ", numero2, "? ", resultado)
 
      numero1 := 5
      numero2 := 5
      resultado := numero1 = numero2
      ESCREVAL (numero1, " =  ", numero2, "? ", resultado)
      resultado := numero1 &lt;&gt; numero2
      ESCREVAL (numero1, " &lt;&gt; ", numero2, "? ", resultado)
      resultado := numero1 &gt; numero2
      ESCREVAL (numero1, " &gt;  ", numero2, "? ", resultado)
      resultado := numero1 &lt; numero2
      ESCREVAL (numero1, " &lt;  ", numero2, "? ", resultado)
      resultado := numero1 &gt;= numero2
      ESCREVAL (numero1, " &gt;= ", numero2, "? ", resultado)
      resultado := numero1 &lt;= numero2
      ESCREVAL (numero1, " &lt;= ", numero2, "? ", resultado)
 
      numero1 := 5
      numero2 := 8
      resultado := numero1 = numero2
      ESCREVAL (numero1, " =  ", numero2, "? ", resultado)
      resultado := numero1 &lt;&gt; numero2
      ESCREVAL (numero1, " &lt;&gt; ", numero2, "? ", resultado)
      resultado := numero1 &gt; numero2
      ESCREVAL (numero1, " &gt;  ", numero2, "? ", resultado)
      resultado := numero1 &lt; numero2
      ESCREVAL (numero1, " &lt;  ", numero2, "? ", resultado)
      resultado := numero1 &gt;= numero2
      ESCREVAL (numero1, " &gt;= ", numero2, "? ", resultado)
      resultado := numero1 &lt;= numero2
      ESCREVAL (numero1, " &lt;= ", numero2, "? ", resultado)
 
fimalgoritmo</pre>
A intenção deste algoritmo é mostrar o funcionamento dos operadores relacionais com 3 possibilidades de valores: um número menor que o outro, dois números iguais e um número maior que outro. Abaixo o resultado da execução.

<img class="aligncenter size-full wp-image-220" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/resultado-operadores-relacionais.png" alt="resultado-operadores-relacionais" width="681" height="333" />
<h4>Operadores lógicos em programação</h4>
Em todas as linguagens de programação existem símbolos para executarmos essas operações. As operações maior, menor, maior ou igual e menor ou igual na maioria das linguagens de programação são os mesmos símbolos (até hoje não encontrei uma linguagem que tenha símbolo diferente para estes operadores): &gt; (maior), &lt; (menor), &gt;= (maior ou igual) e &lt;=(menor ou igual).

Mas os vilões dos iniciantes são os símbolos para testar igualdade e diferença. Em cada linguagem é de um jeito! Em java, C, C#, javascript,… por exemplo, os símbolos de igual e diferente são: == e !=. Já em Pascal, SQL, Visual Basic, … os símbolos de igual e diferente são: = e &lt;&gt;. Então fique esperto quando for aprender alguma dessas linguagens!

Em java, não é possível testar Strings (textos) com o operador de igualdade (==), pois String é uma classe e não um tipo primitivo, e para testar a igualdade entre objetos deve-se utilizar o método <em>equals()</em>. Assim: nome.equals(“João”).

Em algumas linguagens de programação (Python por exemplo) é possível utilizar os operadores maior e menor para verificar a precedência alfabética de um texto em relação a outro. Por exemplo: ”Pedro” &lt; “Paulo” resulta em FALSO, pois o texto “Pedro” alfabeticamente aparece depois do texto “Paulo”.

Essa foi a aula sobre os <strong>operadores</strong>. Espero que agora você já esteja craque e manjando tudo sobre os operadores.

Importante lembrar que do mesmo jeito que aprendemos os operadores aritméticos nas escola, para aprender os operadores relacionais e lógicos é necessário bastante prática!

Quer um exercício simples? Faça um algoritmo que solicite um número ao usuário e informe se este número é <strong>par</strong> ou <strong>ímpar</strong>.

Outro exercício? Solicite a idade do usuário e informe se ele é maior de dade ou não, se ele pode votar (acima de 16 anos) e se ele é <strong>obrigado</strong> a votar (entre 18 e 65 anos).

Até a próxima aula!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>192</wp:post_id>
		<wp:post_date><![CDATA[2015-06-02 00:48:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-02 00:48:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[minicurso-4-operadores]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[page-lesson.php]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Aula 5/10 - Tomando decisões!</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-5-tomando-decisoes/</link>
		<pubDate>Tue, 02 Jun 2015 15:42:59 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/?page_id=228</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Aula (5/10) Tomando decisões!</h1>
Olá nobre amigo(a)! Hoje vamos colocar a mão na massa e aprender a forma mais básica de controlar o fluxo de um algoritmo.

Vamos fazer os nossos algoritmos tomarem decisões!

Para isso existem as estruturas de decisão, e a mais utilizada é a estrutura SE-ENTÃO-SENÃO (Em inglês IF-THEN-ELSE).

<u>Leitura de aproximadamente 10 minutos.</u>
<h2>Estrutura de decisão SE-ENTÃO-SENÃO</h2>
O funcionamento é simples: com base no resultado de uma expressão lógica (lembra da nossa última aula quando falamos dos operadores lógicos?), o fluxo do algoritmo segue para um bloco de instruções ou não. Observe o esquema da estrutura SE-ENTÃO-SENÃO:
<pre class="toolbar-overlay:false lang:default decode:true highlight:0">SE &lt;expressão lógica&gt;
   ENTÃO
      &lt;instruções a serem executadas caso a expressão booleana resulte em VERDADEIRO&gt;
   SENÃO
      &lt;instruções a serem executadas caso a expressão booleana resulte em FALSO&gt;
FIM-SE
</pre>
O bloco de código SENÃO é opcional. É comum encontrar instruções de decisão apenas com SE-ENTÃO sem o bloco SENÃO. Veja um esquema gráfico desta estrutura de decisão.

<center><img class="aligncenter size-full wp-image-240" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/estrutura-IF.png" alt="estrutura-IF" width="580" height="515" /></center>
<h2>SE-ENTÃO-SENÃO na prática!</h2>
Vejamos um exemplo de utilização desta estrutura com um algoritmo, para isso vamos utilizar o <a href="https://dicasdeprogramacao.com.br/download-visualg/" target="_blank">VisuAlg</a>.

Neste algoritmo, vamos simular um caixa eletrônico quando vamos sacar dinheiro. O caixa eletrônico verifica se o valor que desejamos sacar é menor que o saldo disponível. Assumiremos que há R$ 1000 de saldo disponível para o saque.
<pre class="toolbar-overlay:false lang:default decode:true highlight:0">algoritmo "SacarDinheiro"
var
   SaldoDisponivel : REAL
   ValorDoSaque : REAL
inicio
 
      SaldoDisponivel := 1000 //Assumimos que há 1000 reais de saldo na conta disponível para saque
      ESCREVA ("Informe o valor do Saque: ")
      LEIA (ValorDoSaque)
      SE ValorDoSaque &lt;= SaldoDisponivel ENTAO
         SaldoDisponivel := SaldoDisponivel - ValorDoSaque
         ESCREVAL ("Sacando R$ ", ValorDoSaque, ".")
      SENAO
         ESCREVAL ("O valor solicitado é maior que o valor disponível para saque!")
      FIMSE
 
      ESCREVAL ("Saldo disponível: R$ ", SaldoDisponivel)
 
fimalgoritmo
</pre>
Abaixo a execução do algoritmo acima quando informamos valores menores que 1000.

<center><img class="aligncenter size-full wp-image-247" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/Sacar-dinheiro-menor-que-10001.png" alt="Sacar-dinheiro-menor-que-10001" width="681" height="199" /></center>Agora a execução do mesmo algoritmo, porém inserindo um valor maior que 1000 para saque.

<center><img class="aligncenter size-full wp-image-248" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/Sacar-dinheiro-maior-que-1000.png" alt="Sacar-dinheiro-maior-que-1000" width="681" height="228" /></center>Perceba que o fluxo do algoritmo tomou rumos diferentes.

Essa é a estrutura de controle de fluxo mais utilizada na criação de programas de computador. Pratique-a criando algoritmos que tomam decisão.
<h2>Hora de praticar!</h2>
Para aprender você deve praticar bastante criando algoritmos.

Como exercício, crie um algoritmo para verificar se um aluno foi aprovado ou reprovado no final do ano, assim: O usuário digita as 4 notas (de 0 a 10) bimestrais do aluno e o algoritmo deve calcular a média e verificar se é maior ou igual a 6. <b>Caso afirmativo</b>, exibe na tela uma mensagem informando que o aluno foi aprovado, <b>caso contrário</b>, uma mensagem informando que ele foi reprovado.

Amanhã vou enviar no seu e-mail a resposta. ;) Mas é muito importante que você tente fazer esse algoritmo sozinho antes de ver a resposta.

Se você ainda não está inscrito neste minicurso, se inscreva agora! É GRÁTIS! Basta clicar no botão laranja no topo. Você receberá as 10 aulas no seu e-mail.

Na próxima aula vamos ver como fazemos para nosso algoritmo tomar decisão quanto tem MUITAS opções.

Até a próxima aula!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>228</wp:post_id>
		<wp:post_date><![CDATA[2015-06-02 15:42:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-02 15:42:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[minicurso-5-tomando-decisoes]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[page-lesson.php]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Aula 6/10 - Tomando decisões entre muitas opções.</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-6-tomando-decisoes-entre-muitas-opcoes/</link>
		<pubDate>Wed, 03 Jun 2015 01:15:58 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/?page_id=267</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Aula (6/10) Tomando decisões entre muitas opções.</h1>
<span style="text-decoration: underline;">Duração da aula: aproximadamente 15 minutos.</span>

Olá querido aluno, conseguiu resolver o exercício da última aula? Mandei a resposta no seu e-mail, você recebeu?

Na última aula nós falamos da estrutura SE-ENTÃO-SENÃO, que é usada para fazer os nossos programas tomarem decisões por si só.

Dei o exemplo do caixa eletrônico, em que o programa deveria verificar se o valor que desejamos sacar é menor que o saldo disponível.

Na aula de hoje vamos ver qual estrutura de controle de fluxo devemos utilizar quando temos muitas opções para tomar decisão.

Antes de aprender a estrutura ESCOLHA-CASO, vamos ver uma coisa que a princípio não tem nada a ver com o nosso assunto, mas vai te ajudar a entender como funciona esta estrutura.
<h2>Equipamentos de rede de computadores</h2>
Talvez você já saiba mais ou menos algumas coisas sobre rede de computadores. Existem várias topologias de redes: estrela, barramento, anel, etc...

Mas quero chamar a sua atenção para dois equipamentos utilizados nas redes de computadores. Um é o <strong>HUB</strong> e o outro é o<strong> SWITCH</strong>.

<img class=" size-full wp-image-276 aligncenter" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/hub-e-switch.png" alt="hub e switch" width="640" height="233" />

Esses dois equipamentos são muito parecidos, algumas pessoas até pensam que são a mesma coisa. Mas há uma pequena diferença entre eles.

A tarefa é a mesma, transferir dados entre as portas, a diferença é a forma com que a tarefa é realizada por cada equipamento.

Basicamente o <strong>HUB é burro</strong> e o <strong>SWITCH é inteligente</strong>. Como assim?

Simples, quando o HUB recebe dados por uma porta, ele reenvia esses dados para TODAS as portas.

Por exemplo, se o computador ligado na porta 1 enviou um pacote de dados para o computador ligado na porta 5, o HUB enviará os dados para todas as portas, 1, 2, 3, 4, 5, 6... O computador de destino que vai descobrir se o pacote de dados é pra ele ou não, caso não o seja ele vai ignorar o pacote de dados.

Isso significa que os HUBs deixam a rede lenta, pois haverá muito congestionamento de dados na rede e processamento desnecessário pelos computadores. Além disso, apenas um pacote estará trafegando na rede por vez.

Ou seja, o <strong>HUB é burro</strong>!

Já o SWITCH é mais inteligente. Quando o SWITCH recebe um pacote de dados, ele identifica a porta correta para encaminhar aquele pacote de dados.

Por exemplo, se o computador ligado na porta 1 enviou um pacote de dados para o computador ligado na porta 5, o SWITCH enviará os dados apenas para a porta 5.

Dessa forma há menos congestionamento na rede e é possível trafegar vários pacotes na rede paralelamente.
<h2>Lembra que inglês é importante?</h2>
Talvez você esteja se perguntando o que tem a ver o HUB e o SWITCH com a aula de hoje. Tudo!

A estrutura ESCOLHA-CASO funciona da mesma forma que o SWITCH das redes de computadores só que ao invés de enviar um pacote de dados para uma determinada porta, vamos enviar o fluxo do algoritmo para um determinado ponto do código. A ideia é a mesma!

A propósito, como eu disse na primeira aula, inglês é essencial para trabalhar com programação, EMBORA NÃO SEJA IMPEDITIVO. E quando você estiver programando em inglês verá que ESCOLHA-CASO é traduzido como SWITCH-CASE.
<h2>A estrutura ESCOLHA-CASO</h2>
Lembra do SE-ENTÃO-SENÃO da aula passada? Imagine que você tem um menu de opções e o usuário deve escolher uma opção, dentre várias. Como você identificaria qual opção o usuário digitou?

Talvez você faria algo assim ...
<pre class="lang:default decode:true">SE opção = 1 ENTÃO
    “instruções a serem executadas caso opção = 1”
SENÃO
    SE opção = 2 ENTÃO
        “instruções a serem executadas caso opção = 2”
    SENÃO
        SE opção = 3 ENTÃO
            “instruções a serem executadas caso opção = 3”
        SENÃO
            ...
        FIM-SE
    FIM-SE
FIM-SE</pre>
Ou seja, vários SE-ENTÃO-SENÃO aninhados.

A proposta do ESCOLHA-CASO é ser uma solução mais elegante para este caso. Levando o fluxo do programa direto ao bloco de código correto, dependendo do valor de uma variável de verificação.

Essa é a estrutura ESCOLHA-CASO.
<pre class="lang:default decode:true">ESCOLHA &lt;variável de verificação&gt;
    CASO &lt;valor1&gt; FAÇA
        “instruções a serem executadas caso &lt;variável de verificação&gt; = &lt;valor1&gt;”
    CASO &lt;valor2&gt; FAÇA
        “instruções a serem executadas caso &lt;variável de verificação&gt; = &lt;valor2&gt;”
    CASO &lt;valor3&gt; FAÇA
        “instruções a serem executadas caso &lt;variável de verificação&gt; = &lt;valor3&gt;”
    ...
FIM-ESCOLHA</pre>
O esquema visual do fluxograma desta estrutura é como a figura abaixo.

<img class="aligncenter size-full wp-image-284" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/06/estrutura-ESCOLHA-CASO.png" alt="estrutura-ESCOLHA-CASO" width="687" height="513" />
<h2>ESCOLHA-CASO na prática!</h2>
Nada melhor para aprender programação do que praticar. Bastante! Então vamos ver um exemplo prático da utilização do ESCOLHA-CASO em comparação ao SE-ENTÃO-SENÃO.

(Novamente vamos usar o Visualg para criar os nossos algoritmos, você pode fazer com lápis e papel, mas caso queira baixar o Visualg, <strong><a href="https://dicasdeprogramacao.com.br/download-visualg/" target="_blank">clique aqui para fazer o download</a></strong>)

Imagine a seguinte situação: Você deseja criar um algoritmo para uma calculadora, o usuário digita o primeiro número, a operação que deseja executar e o segundo número. Dependendo do que o usuário informar como operador, o algoritmo executará um cálculo diferente (soma, subtração, multiplicação ou divisão).

Vejamos como seria este algoritmo utilizando a estrutura SE-ENTÃO-SENÃO.
<pre class="lang:default decode:true ">algoritmo "CalculadoraBasicaComSE"
var
   numero1 : REAL
   numero2 : REAL
   operacao : CARACTERE
   resultado : REAL
inicio

      ESCREVA ("Digite o primeiro número: ")
      LEIA (numero1)
      ESCREVA ("Digite a operação: ")
      LEIA (operacao)
      ESCREVA ("Digite o segundo número: ")
      LEIA (numero2)

      SE operacao = "+" ENTAO
         resultado := numero1 + numero2
      SENAO
         SE operacao = "-" ENTAO
            resultado := numero1 - numero2
         SENAO
            SE operacao = "*" ENTAO
               resultado := numero1 * numero2
            SENAO
               SE operacao = "/" ENTAO
                  resultado := numero1 / numero2
               FIMSE
            FIMSE
         FIMSE
      FIMSE

      ESCREVA ("Resultado: ", resultado)

fimalgoritmo</pre>
Veja como os SEs aninhados (dentro dos SENÃOs) deixam o código mais complexo. Dá pra entender a lógica, mas não é muito elegante. Agora vamos ver como ficaria a mesma lógica com a estrutura ESCOLHA-CASO.
<pre class="lang:default decode:true ">algoritmo "CalculadoraBasicaComESCOLHA_CASO"
var
   numero1 : REAL
   numero2 : REAL
   operacao : CARACTERE
   resultado : REAL
inicio

      ESCREVA ("Digite o primeiro número: ")
      LEIA (numero1)
      ESCREVA ("Digite a operação: ")
      LEIA (operacao)
      ESCREVA ("Digite o segundo número: ")
      LEIA (numero2)

      ESCOLHA operacao
         CASO "+"
            resultado := numero1 + numero2
         CASO "-"
            resultado := numero1 - numero2
         CASO "*"
            resultado := numero1 * numero2
         CASO "/"
            resultado := numero1 / numero2
      FIMESCOLHA

      ESCREVA ("Resultado: ", resultado)

fimalgoritmo</pre>
Bem mais bonito! Né? Agora a lógica tá mais visível e elegante. O resultado dos dois algoritmos é o mesmo. Mas o código com o ESCOLHA-CASO é mais fácil de entender.
<h2>CASO NÃO TRATADO NA ESTRUTURA (OUTROCASO)</h2>
Além das opções tratadas na estrutura, é possível identificar quando o valor da variável não é equivalente a nenhum valor informado como opção nos CASOs, ou seja, é um “OUTROCASO”.

No algoritmo que fizemos anteriormente, imagine se o usuário digitasse um valor diferente de “+”, “-“, “*” e “/”. Caso quiséssemos apresentar uma mensagem para o usuário informando que ele digitou uma opção inválida, utilizaríamos esse recurso da estrutura ESCOLHA-CASO. Veja.
<pre class="lang:default decode:true">ESCOLHA operacao
   CASO "+"
      resultado := numero1 + numero2
   CASO "-"
      resultado := numero1 - numero2
   CASO "*"
      resultado := numero1 * numero2
   CASO "/"
      resultado := numero1 / numero2
   OUTROCASO
      ESCREVA("A operação digitada é inválida!")
FIMESCOLHA</pre>
Como você pôde observar, em termos de organização de código a estrutura ESCOLHA-CASO é uma opção muito elegante quando se tem muitos SE-ENTÃO-SENÃO para verificar a mesma variável. Facilita a leitura do algoritmo e a manutenção do código.
<h2>Sua vez de praticar!</h2>
Aprender programação é como aprender matemática, tem que praticar fazendo exercícios. Portanto vou deixar um exercício para você resolver sozinho.

* Crie um algoritmo em que o usuário digita uma letra qualquer e o programa verifica qual a ordem dessa letra no alfabeto, por exemplo: se o usuário digitar a letra ‘G’ o programa deve imprimir na tela, “A letra G está na posição 7 do alfabeto”.Implemente com a estrutura ESCOLHA-CASO e depois com a estrutura SE-ENTÃO-SENÃO para perceber a diferença gritante no código.

Amanhã enviarei um e-mail para você com uma solução para exercício. Mas é muito importante que você tente fazer os algoritmos sozinho antes de ver a resposta.

<strong>Você só receberá a resposta se estiver inscrito neste minicurso grátis.</strong> Se você ainda não está inscrito neste minicurso, se inscreva agora! É GRÁTIS! Basta clicar no botão laranja no topo. Você receberá as 10 aulas no seu e-mail.

Na próxima aula que você receberá por e-mail, vou te ensinar a fazer estruturas de repetição.

Até a próxima aula!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>267</wp:post_id>
		<wp:post_date><![CDATA[2015-06-03 01:15:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-03 01:15:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[minicurso-6-tomando-decisoes-entre-muitas-opcoes]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[page-lesson.php]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Aula 7/10 - Loops básicos!</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-7-loops-basicos/</link>
		<pubDate>Tue, 07 Jul 2015 16:13:03 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/?page_id=290</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Aula (7/10) Loops básicos!</h1>
Seja bem vindo a 7ª aula do <strong>minicurso GRÁTIS de lógica de programação</strong>!

Até aqui aprendemos sobre escrever dados na tela e ler informações que o usuário digita, aprendemos o que são variáveis e constantes, aprendemos um pouco mais sobre operadores (aritméticos, lógicos e relacionais) e também aprendemos a controlar o fluxo de um algoritmo. Através de <strong>estruturas de decisões e de seleção</strong> decidimos para onde o fluxo do nosso algoritmo deve seguir.

Com o que aprendemos até agora já dá pra fazer muita coisa com programação!

Mas hoje vamos aprender um recurso MUITO usado na programação: Os <strong>LOOPs</strong>

Entender como funcionam os LOOPs na programação fará você mudar a forma de pensar em algoritmos.

<em>Obs: Se você não teve acesso às outras aulas, clique no botão no topo da página e se inscreva gratuitamente neste minicurso.</em>

<span style="text-decoration: underline;">Duração da aula: aproximadamente 15 minutos.</span>
<h2>O que é LOOP?</h2>
Lembra quando você aprendeu a fazer <span style="text-decoration: underline;">multiplicação</span>?

O(A) professor(a) deve ter te ensinado a fazer várias somas. Certo?

Por exemplo ...
<blockquote>4 * 5 = 4 + 4 + 4 + 4 + 4</blockquote>
Nosso(a) professor(a), nos ensinou a fazer um <strong>loop</strong>!

<strong>Em programação, LOOP é uma instrução para o programa repetir tarefas.</strong>

No algoritmo da multiplicação, nós somamos o primeiro valor X vezes, sendo X o segundo valor.

Os loops são muito utilizados no mundo da programação. Eles vêem em 3 sabores: ENQUANTO-FAÇA, REPITA-ATÉ e PARA-FAÇA.

Na aula de hoje vamos estudar os dois primeiros: ENQUANTO-FAÇA e REPITA-ATÉ.
<h2>Estrutura de repetição ENQUANTO-FAÇA</h2>
O funcionamento da estrutura de repetição ENQUANTO-FAÇA (em inglês WHILE-DO) é tão simples quanto o SE-ENTÃO-SENÃO. A diferença é que os passos dentro deste bloco são repetidos <span style="text-decoration: underline;">enquanto</span> a expressão booleana resultar VERDADEIRO.

<em>Obs: Lembrando os tipos de dados da aula 3, o tipo de dados <strong>booleano</strong> só pode assumir dois valores: VERDADEIRO ou FALSO.</em>

Voltando ao ENQUANTO ... Vejamos como ficaria o pseudo-código desta estrutura:
<blockquote><strong>ENQUANTO</strong> &lt;expressão booleana&gt; <strong>FAÇA</strong>
<p style="padding-left: 30px;">&lt;instruções a serem executadas enquanto a expressão booleana resultar em VERDADEIRO&gt;</p>
<strong>FIM-ENQUANTO</strong></blockquote>
Também chamamos esta estrutura de repetição de <em>loop pré-testado</em>, pois <strong>a expressão booleana é verificada antes da primeira execução</strong>. Se inicialmente ela já resultar em FALSO, as instruções que estão dentro do bloco não são executadas nenhuma vez.

Este é o fluxograma desta estrutura de repetição. Repare que testamos a condição antes de entrar no LOOP.

<img class="size-full wp-image-308 aligncenter" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/09/estrutura-ENQUATO.png" alt="estrutura-ENQUATO" width="400" height="515" />
<h3>Hora de praticar</h3>
Para aprender programação, nada melhor que praticar! Vamos ver um exemplo de LOOP com a estrutura ENQUANTO-FAÇA, utilizando a ferramenta VisuAlg.

Vamos fazer um algoritmo para somar valores até o usuário digitar o valor 0. Ou seja, vamos somar todos os valores que o usuário digitar, porém quando ele digitar 0 o “loop” acaba, a cada iteração do loop vamos apresentar o resultado atual da soma.
<pre class="toolbar:1 lang:default decode:true ">algoritmo "SomaEnquantoValorDiferenteDe0"
var
   valorDigitado : REAL
   soma : REAL
inicio
 
      soma := 0
      ESCREVA ("Digite um valor para a soma: ")
      LEIA (valorDigitado)
 
      ENQUANTO valorDigitado &lt;&gt; 0 FACA
          soma := soma + valorDigitado
          ESCREVAL ("Total: ", soma)
          ESCREVA ("Digite um valor para a soma: ")
          LEIA (valorDigitado)
      FIMENQUANTO
 
      ESCREVAL ("Resultado: ", soma)
 
fimalgoritmo</pre>
<em>Obs. A função ESCREVAL quebra a linha (como um ENTER) no final.</em>

O resultado deste algoritmo é algo assim:

<img class="aligncenter size-full wp-image-318" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/07/Resultado-algoritmo-ENQUANTO.png" alt="Resultado-algoritmo-ENQUANTO" width="682" height="292" />
<h2>Estrutura de repetição REPITA-ATÉ</h2>
Acho que você já deve imaginar como é esta estrutura né? Não!? Fácil!

Lembra que eu disse que a estrutura ENQUANTO-FAÇA é conhecida como <em>loop pré-testado</em>. Então, a estrutura REPITA-ATÉ (REPEAT-UNTIL em inglês) é o contrário. Ela é um LOOP <em>pós-testado</em>. Isso significa que a verificação para repetir o LOOP é testada no final do bloco.

Este é o pseudo-código do REPITA-ATÉ:
<blockquote><strong>REPITA</strong>
<p style="padding-left: 30px;">&lt;instruções a serem executadas repetidamente <span style="text-decoration: underline;">até</span> a expressão booleana retornar VERDADEIRO&gt;</p>
<strong>ATÉ</strong> &lt;expressão booleana&gt;</blockquote>
Uma coisa muito importante a se notar é que além de ser pós-testada, esta estrutura testa <strong>o contrário</strong> do ENQUANTO. Ou seja, na estrutura <strong>REPITA-ATÉ</strong>, as instruções do bloco são executadas repetidamente <span style="text-decoration: underline;">enquanto</span> a expressão booleana resultar FALSO. A partir do momento que a expressão booleana resultar VERDADEIRO, o fluxo do algoritmo sairá do LOOP.

Veja o funcionamento no fluxograma.

￼<img class="aligncenter wp-image-316 size-full" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/07/estrutura-REPITA.png" alt="estrutura-REPITA" width="397" height="507" />

Não sei se você também percebeu, enquanto na estrutura ENQUANTO-FAÇA o bloco do LOOP pode não ser executado nenhuma vez, <strong>na estrutura REPITA-ATÉ o bloco é executado pelo menos uma vez</strong>.
<h3>Hora de praticar</h3>
Que tal fazer o mesmo exercício que fizemos acima com a estrutura ENQUANTO-FAÇA, mas desta fez utilizando a estrutura REPITA-ATÉ? Vamos ver como ficaria?
<pre class="toolbar:1 lang:default decode:true">algoritmo "SomaAteValorIgualA0"
var
   valorDigitado : REAL
   soma : REAL
inicio
 
      soma := 0   
 
      REPITA
          ESCREVA ("Digite um valor para a soma: ")
          LEIA (valorDigitado)
          soma := soma + valorDigitado
          ESCREVAL ("Total: ", soma)
      ATE valorDigitado = 0
 
fimalgoritmo</pre>
Algumas diferenças ...

Se você prestar atenção, vai perceber que na estrutura ENQUANTO-FAÇA tivemos que repetir uma parte do código antes do LOOP e dentro do LOOP. Repetimos a seguinte parte:
<pre class="toolbar:1 lang:default decode:true">      ESCREVA ("Digite um valor para a soma: ")
      LEIA (valorDigitado)</pre>
Isso aconteceu porque a estrutura ENQUANTO-FAÇA é pré-testada. Não daria pra testar se o usuário digitou o valor 0 se ele ainda não tivesse digitado valor nenhum.

Na estrutura REPITA-ATÉ não precisamos escrever essas duas linhas duas vezes, pois ela é pós-testada.

Ah! Outra coisa que também não pode ser deixada de lado é que agora o teste de verificação do LOOP mudou de (<strong>valorDigitado &lt;&gt; 0</strong>) na estrutura ENQUANTO, para (<strong>valorDigitado = 0</strong>) na estrutura REPITA-ATÉ.

Você saberia explicar por quê? Pense um pouco e responda por si mesmo. O resultado deste algoritmo é o mesmo do anterior.
<h2>Conclusão</h2>
Percebemos que é possível utilizar qualquer uma das duas estruturas para implementar LOOPs, porém cada uma é mais apropriada dependendo do problema. Neste problema em particular, a estrutura REPITA-ATÉ se mostrou mais apropriada. Uma vez que nesta estrutura não é necessário repetir um pedaço do código.

A decisão de qual estrutura utilizar entre as duas, sempre será tomada observando a diferença entre PRÉ-TESTADA e PÓS-TESTADA. Fora isso é gosto pessoal (ou requisito do chefe para padronizar o código).

Aprenda muito bem os LOOPs! As estruturas de repetição são muito utilizadas em desenvolvimento de softwares. Entender como elas funcionam é muito importante para resolver problemas que precisam executar tarefas repetidas vezes. Acredite, existem muitos!

Para praticar a utilização da estrutura ENQUANTO, um exercício!

Lembra da multiplicação do começo da aula? Quero que você faça um algoritmo para calcular multiplicação através de somas consecutivas, para facilitar assuma que os dois fatores da multiplicação são <span style="text-decoration: underline;">positivos</span>.
<h3>Agora uma dica bônus ...</h3>
As linguagens de programação são diferentes umas das outras, mas no fundo a lógica de programação é a mesma (quase sempre). Por exemplo. Na linguagem JAVA, não existe a estrutura REPITA-ATÉ. Mas existe a DO-WHILE, ou seja FAÇA-ENQUANTO. Esta também é pós-testada, mas o teste da condição não é o contrário da WHILE-DO. Pelo motivo óbvio. FAÇA-ENQUANTO (o teste der verdadeiro).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>290</wp:post_id>
		<wp:post_date><![CDATA[2015-07-07 16:13:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-07 16:13:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[minicurso-7-loops-basicos]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>7</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[page-lesson.php]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Aula 8/10 - Loops pré-definidos</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/aula-8-loops-pre-definidos/</link>
		<pubDate>Thu, 24 Sep 2015 21:58:55 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/?page_id=334</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Aula (8/10) Loops pré-definidos</h1>
Olá! Bem vindo a 8ª aula do <strong>minicurso GRÁTIS de lógica de programação</strong>!

Na última aula você aprendeu a fazer LOOPs. Você descobriu que é possível fazer loops no seu algoritmo através de duas estruturas de repetição ENQUANTO-FAÇA e REPITA-ATÉ e aprendeu a diferença entre estas duas estruturas.

<em>Caso não esteja inscrito neste minicurso, clique no botão laranja no topo desta página e se inscreva para receber todas as aulas gratuitamente.</em>

Hoje nós vamos ver a estrutura de LOOP mais utilizada na programação: A estrutura de repetição PARA-FAÇA.

Entender bem esta estrutura determinará se você será um bom ou um mau programador, portanto preste bastante atenção nesta aula. Releia quantas vezes forem necessárias. No final tem um exercício para você resolver. Vamos lá?

<span style="text-decoration: underline;">Duração da aula: aproximadamente 15 minutos.</span>
<h2>O que é um LOOP Pré-definido?</h2>
Quando fazemos um algoritmo, muitas vezes já sabemos a quantidade de vezes que um loop deve executar. Por exemplo, some todos os números de 1 a 100. Neste caso, sabemos que o nosso loop deverá ser executado 100 vezes.

O caso mais usado deste tipo de LOOP na programação é quando você deve acessar todos os itens de um vetor, matriz ou lista. (Veremos o que são vetores e matrizes na próxima aula)

Por exemplo, uma situação muito comum para programadores. Imagine que você deve enviar um e-mail para todos os clientes cadastrados no seu banco de dados...

Você sabe que tem uma tabela com 3298 clientes no seu banco de dados. Neste caso, você deve fazer um loop de 1 até 3298, e enviar um e-mail para cada cliente.

Entendido o que é um LOOP pré-definido, vejamos qual estrutura de repetição utilizada para este caso.
<h2>A estrutura PARA-FAÇA</h2>
Você deve estar imaginando que é possível implementar loop pré-definido utilizando as estruturas de repetição que você aprendeu na aula passada. Sim, é perfeitamente possível! Para isto você precisaria utilizar uma variável que na programação chamamos de "contador".

Esta variável nada mais é do que uma simples variável do tipo inteiro que é responsável por contar quantas iterações (execuções do loop) foram executadas.

Vamos tomar como exemplo o caso que disse anteriormente. Como somar todos os números de 1 a 100.

Um algoritmo com a estrutura ENQUANTO-FAÇA para este problema ficaria assim.
<pre class="toolbar:1 lang:default decode:true">Algoritmo "Soma1A100ComEnquanto"
Var
  contador : INTEIRO
  soma : INTEIRO
Inicio
      contador := 1
      soma := 0
      ENQUANTO contador &lt;= 100 FAÇA
               soma := soma + contador
               contador := contador + 1
      FIMENQUANTO
      ESCREVA("A soma de 1 a 100 é: ", soma)
Fimalgoritmo</pre>
Embora seja possível utilizar estas estruturas de repetição para implementar um loop pré-definido, há uma estrutura criada especificamente para isto. A estrutura de repetição PARA-FAÇA.

O que o PARA-FAÇA faz é justamente implementar um contador implicitamente. Ou seja, as operações de inicializar o contador (contador := 1), incrementar o contador (contador := contador + 1) e verificar se o LOOP deve continuar (contador &lt;= 100) é realizada implicitamente pela estrutura PARA-FAÇA.

O esquema de utilização esta estrutura é assim:
<blockquote><strong>PARA</strong> &lt;contador&gt; <strong>DE</strong> &lt;valor inicial&gt; <strong>ATE</strong> &lt;valor final&gt; [<strong>PASSO</strong> &lt;valor de incremento&gt;] <strong>FAÇA</strong>
<p style="padding-left: 30px;">&lt;instruções a serem executadas repetidamente até a &lt;contador&gt; atingir o valor final&gt;</p>
<strong>FIM-PARA</strong></blockquote>
A inicialização do contador é realizado implicitamente com o informado na declaração da estrutura. A condição para executar a iteração é que o valor da variável contadora não tenha atingido o &lt;valor final&gt;. E ao final de cada iteração, o valor da variável contadora é incrementado em 1 (ou o valor declarado como PASSO ou &lt;valor de incremento&gt;).

Repare que o passo de incremento é opcional, por padrão o contador é incrementado de 1 em 1, mas você pode especificar que quer um outro valor de incremento, por exemplo de 2 em 2 ou de 3 em 3.

Para o nosso problema de somar todos os números de 1 a 100, um algoritmo com a a estrutura PARA-FAÇA ficaria assim.
<pre class="toolbar:1 lang:default decode:true">Algoritmo "Soma1A100ComPara"
Var
  contador : INTEIRO
  soma : INTEIRO
Inicio
      soma := 0
      PARA contador DE 1 ATÉ 100 FAÇA
               soma := soma + contador
      FIMPARA
      ESCREVA("A soma de 1 a 100 é: ", soma)
Fimalgoritmo</pre>
Viu a diferença? No fundo é a mesma coisa, mas para loops pré-definidos a estrutura mais utilizada é a PARA-FAÇA.

Vejamos um fluxograma desta estrutura de repetição.

<img class="aligncenter size-full wp-image-347" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/09/estrutura-PARA.png" alt="estrutura-PARA" width="440" height="608" />
<h2>Hora de praticar!</h2>
Pra dar mais um exemplo de LOOP pré-definido. Vamos fazer um algoritmo para resolver um problema matemático: O fatorial de um número.

Se você não sabe, fatorial é a multiplicação de todos os números de 1 até ao número que se está calculando. Por exemplo: Fatorial de 5 (5!) = 1 * 2 * 3 * 4 * 5 = 120. Fácil né?

Primeiro vamos fazer um algoritmo utilizando o ENQUANTO.
<pre class="toolbar:1 lang:default decode:true">algoritmo "FatorialComENQUANTO"
 
var
   numero : INTEIRO
   fatorial : INTEIRO
   contador : INTEIRO
inicio
 
      ESCREVA ("Digite o número para calcular o fatorial: ")
      LEIA (numero)
 
      fatorial := 1
      contador := 1
      ENQUANTO contador &lt;= numero FACA
          fatorial := fatorial * contador
          contador := contador + 1
      FIMENQUANTO
 
      ESCREVA ("O fatorial de ", numero, " é : ", fatorial)
 
fimalgoritmo</pre>
Veja que foi necessário incrementar o contador explicitamente (linha 16). Com a estrutura de repetição PARA, isso não é necessário. Vejamos agora o mesmo algoritmo implementado com o PARA.
<pre class="toolbar:1 lang:default decode:true ">algoritmo "FatorialComPARA"

var
   numero : INTEIRO
   fatorial : INTEIRO
   contador : INTEIRO
inicio

      ESCREVA ("Digite o número para calcular o fatorial: ")
      LEIA (numero)

      fatorial := 1
      PARA contador DE 1 ATE numero FACA
          fatorial := fatorial * contador
      FIMPARA

      ESCREVA ("O fatorial de ", numero, " é : ", fatorial)

fimalgoritmo</pre>
Nesta estrutura, não é necessário incrementar nem inicializar o contador, isso é feito automaticamente. O resultado dos dois algoritmos é o mesmo, veja um exemplo de execução deste algoritmo.

<img class="aligncenter size-full wp-image-349" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/09/Resultado-Fatorial.png" alt="Resultado-Fatorial" width="681" height="138" />

LOOPs podem ser implementados com qualquer estrutura de repetição, porém, em alguns casos uma estrutura se mostra mais adequada que outras, como nesse caso do fatorial a mais adequada é a estrutura PARA. Conhecer essas estruturas de repetição é muito importante para criar programas melhores.

Como eu disse, a estrutura de repetição PARA-FAÇA é muito utilizada para acessar os valores de vetores, matrizes e listas. E esse é o assunto da nossa próxima aula!
<h2>Exercício para você resolver!</h2>
Como sempre digo, lógica de programação só se aprende praticando. Então é a sua vez de tentar resolver um problema utilizando algoritmos. O exercício de hoje é o seguinte:

<strong>Faça um algoritmo para informar se um determinado número é primo ou não.</strong>

Número primo é todo número que só é divisível por 1 e por ele mesmo sem deixar resto. Exemplos e números primos são: 2, 3, 7, 13, 17, 5, 11, ...

Fácil né!? Dica, você precisará criar um LOOP (de preferência utilizando o PARA) e verificar se o resto das divisões é 0 utilizando o operador <strong>mod</strong>,. Por exemplo, a expressão "6 MOD 4" resulta 2, pois é o resto da divisão de 6 por 4.

Amanhã eu te envio o meu algoritmo para este problema. Assim, você poderá comparar o seu algoritmo com o meu. Mas tente resolver antes heim!

Até amanhã!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>334</wp:post_id>
		<wp:post_date><![CDATA[2015-09-24 21:58:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-24 21:58:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[aula-8-loops-pre-definidos]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>8</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[page-lesson.php]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Aula 9/10 - Vetores e Matrizes (Arrays)</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/aula-9-vetores-e-matrizes-arrays/</link>
		<pubDate>Tue, 29 Sep 2015 14:01:14 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/?page_id=356</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Aula (9/10) Vetores e Matrizes (Arrays)</h1>
Opa! Tudo bem? Esta é a 9ª aula do <strong>minicurso GRÁTIS de lógica de programação</strong>!

Hoje vamos falar sobre Vetores e Matrizes. Você vai aprender para que serve, como usar e, claro, fazer exercícios para fixar o aprendizado. Ao final desta aula você estará craque nesta estrutura de dados tão usada na programação. Vamos lá?

<span style="text-decoration: underline;">Duração da aula: aproximadamente 10 minutos.</span>
<h2>O que são Vetores e Matrizes</h2>
<strong>Vetores</strong> e <strong>Matrizes</strong> são estruturas de dados bastante simples que podem nos ajudar muito quando temos um grande número de variáveis do mesmo tipo em um algoritmo.

Bom ... Imagine o seguinte problema: Você precisa criar um algoritmo que lê o nome e as 4 notas de 50 alunos, calcular a média de cada aluno e informar quais foram aprovados e quais foram reprovados. Conseguiu imaginar quantas variáveis você vai precisar pra fazer este algoritmo? Muitas né?

Vamos fazer uma continha rápida aqui: são 50 variáveis para armazenar os nomes dos alunos, 200 variáveis para armazenar as 4 notas de cada aluno (4 * 50) e por fim, 50 variáveis para armazenar as médias de cada aluno. 300 variáveis no total, sem contar a quantidade de linhas de código que você vai precisar para ler todos os dados, calcular as médias de cada aluno e apresentar todos resultados.

Mas eu tenho uma boa notícia pra você! Nós não precisamos criar 300 variáveis! Podemos utilizar <strong>Vetores</strong> e <strong>Matrizes</strong> (também conhecidos como <strong>ARRAYs</strong>)!

Tá bom ... Mas o que são esses tais vetores e matrizes?

<strong>Vetor</strong> (<strong>array</strong> uni-dimensional) é uma variável que armazena várias variáveis do mesmo tipo. No problema apresentado anteriormente, nós podemos utilizar um vetor de 50 posições para armazenar os nomes dos 50 alunos.

<strong>Matriz</strong> (<strong>array</strong> multi-dimensional) é um <strong>vetor</strong> de <strong>vetores</strong>. No nosso problema, imagine uma matriz para armazenar as 4 notas de cada um dos 50 alunos. Ou seja, um vetor de 50 posições, e em cada posição do vetor, há outro vetor com 4 posições. Isso é uma matriz!

Cada item do vetor (ou matriz) é acessado por um número chamado de <strong>índice</strong>. Ou <strong>index</strong> em inglês.

Uma bela forma de pensar software é pensar graficamente... Então vamos imaginar no nosso exemplo dos nomes, notas e médias dos 50 alunos  como seriam os vetores e matrizes graficamente para facilitar o entendimento do conceito.

<img class="aligncenter size-full wp-image-357" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/09/vetor-e-matriz.png" alt="vetor-e-matriz" width="593" height="623" />

Podemos ver na imagem acima que cada posição do vetor é identificado por um número (chamado de <strong>índice</strong>), no caso da matriz são dois números (um na vertical e um na horizontal).

Claro que também pode existir matrizes com mais de duas dimensões, mas não precisa se prender nestes detalhes agora. ;)

No Visualg os vetores são declarados da seguinte maneira.
<blockquote><strong>&lt; nome da variável&gt;</strong> vetor [1..<strong>&lt;tamanho&gt;</strong>] de <strong>&lt;tipo de dados&gt;</strong></blockquote>
E as matrizes assim:
<blockquote><strong>&lt; nome da variável&gt;</strong> vetor [1..<strong>&lt;tamanho 1&gt;</strong>,1..<strong>&lt;tamanho 2&gt;</strong>] de <strong>&lt;tipo de dados&gt;</strong></blockquote>
Pronto, agora você já sabe o que são <strong>arrays</strong>. Então vamos ver como implementá-los em um algoritmo.
<h2>Vetores e Matrizes na prática!</h2>
Continuando com o nosso exemplo, vamos implementar um algoritmo para o cálculo das médias. Nele, vamos usar algumas estruturas básicas já apresentadas nas aulas anteriores, tais como a <span style="text-decoration: underline;">estrutura de repetição PARA</span> (aula passada) e a <span style="text-decoration: underline;">estrutura de decisão SE-ENTÃO-SENÃO</span>.

<em>OBS: Neste exemplo vamos reduzir o número de alunos de 50 para 5, para facilitar a visualização do resultado.</em>

<strong>Preste muita atenção no modo como é criado o Vetor e a Matriz e também a forma como é acessada cada posição.</strong>
<pre class="toolbar:1 lang:default decode:true">algoritmo "MediaDe5Alunos"
// Função : Calcular a média das notas de 10 alunos e apresentar quem foi aprovado ou reprovado
// Autor : Gustavo
// Seção de Declarações
var

   nomes: vetor [1..5] de caractere
   notas: vetor [1..5,1..4] de real
   medias: vetor [1..5] de real
   contadorLoop1, contadorLoop2: inteiro

inicio

      //Leitura dos nomes e as notas de cada aluno
      PARA contadorLoop1 DE 1 ATE 5 FACA
           ESCREVA("Digite o nome do aluno(a) número ", contadorLoop1, " de 5: ")
           LEIA(nomes[contadorLoop1])
           PARA contadorLoop2 DE 1 ATE 4 FACA
                ESCREVA("Digite a nota ", contadorLoop2, " do aluno(a) ", nomes[contadorLoop1], ": ")
                LEIA(notas[contadorLoop1, contadorLoop2])
           FIMPARA
           //CÁLCULO DAS MÉDIAS
           medias[contadorLoop1] := (notas[contadorLoop1, 1] + notas[contadorLoop1, 2] + notas[contadorLoop1, 3] + notas[contadorLoop1, 4]) / 4
      FIMPARA

      //APRESENTAÇÃO DOS RESULTADOS
      PARA contadorLoop1 DE 1 ATE 5 FACA
           SE medias[contadorLoop1] &gt;= 6 ENTAO
              ESCREVAL("O aluno(a) ", nomes[contadorLoop1], " foi aprovado com as notas (", notas[contadorLoop1, 1], ", ", notas[contadorLoop1, 2], ", ", notas[contadorLoop1, 3], ", ", notas[contadorLoop1, 4], ") e média: ", medias[contadorLoop1])
           SENAO
              ESCREVAL("O aluno(a) ", nomes[contadorLoop1], " foi reprovado com as notas (", notas[contadorLoop1, 1], ", ", notas[contadorLoop1, 2], ", ", notas[contadorLoop1, 3], ", ", notas[contadorLoop1, 4], ") e média: ", medias[contadorLoop1])
           FIMSE
      FIMPARA

fimalgoritmo</pre>
Repare que os <strong>arrays</strong> (vetores ou matrizes) aliados à estrutura de repetição PARA é um ótimo recurso para algoritmos que precisam de muitas variáveis do mesmo tipo.

Um resultado do algoritmo acima pode ser observado a seguir:
<pre class="lang:default decode:true ">Digite o nome do aluno(a) número 1 de 5: Gustavo
Digite a nota 1 do aluno(a) Gustavo: 9
Digite a nota 2 do aluno(a) Gustavo: 10
Digite a nota 3 do aluno(a) Gustavo: 9,5
Digite a nota 4 do aluno(a) Gustavo: 8
Digite o nome do aluno(a) número 2 de 5: João
Digite a nota 1 do aluno(a) João: 5
Digite a nota 2 do aluno(a) João: 6
Digite a nota 3 do aluno(a) João: 4,5
Digite a nota 4 do aluno(a) João: 7
Digite o nome do aluno(a) número 3 de 5: Pedro
Digite a nota 1 do aluno(a) Pedro: 7
Digite a nota 2 do aluno(a) Pedro: 8,5
Digite a nota 3 do aluno(a) Pedro: 6
Digite a nota 4 do aluno(a) Pedro: 7
Digite o nome do aluno(a) número 4 de 5: Luciana
Digite a nota 1 do aluno(a) Luciana: 10
Digite a nota 2 do aluno(a) Luciana: 7
Digite a nota 3 do aluno(a) Luciana: 7,5
Digite a nota 4 do aluno(a) Luciana: 8
Digite o nome do aluno(a) número 5 de 5: Augusto
Digite a nota 1 do aluno(a) Augusto: 5
Digite a nota 2 do aluno(a) Augusto: 5,5
Digite a nota 3 do aluno(a) Augusto: 7,5
Digite a nota 4 do aluno(a) Augusto: 6
O aluno(a) Gustavo foi aprovado com as notas ( 9, 10, 9.5, 8) e média: 9.125
O aluno(a) João foi reprovado com as notas ( 5, 6, 4.5, 7) e média: 5.625
O aluno(a) Pedro foi aprovado com as notas ( 7, 8.5, 6, 7) e média: 7.125
O aluno(a) Luciana foi aprovado com as notas ( 10, 7, 7.5, 8) e média: 8.125
O aluno(a) Augusto foi aprovado com as notas ( 5, 5.5, 7.5, 6) e média: 6
*** Fim da execução.
*** Feche esta janela para retornar ao Visualg.</pre>
Para você que é um iniciante em programação, este algoritmo pode parecer um pouco complexo, mas se prestar atenção, que os vetores e matrizes podem ser utilizados em muitos problemas. Por exemplo, armazenar os nomes dos funcionários de uma empresa.

Uma coisa importante a se observar é que os arrays são de tamanho fixo, ou seja, eles nascem e morrem com o mesmo tamanho. Se você precisar acrescentar um novo valor em um array e ele já estiver cheio, você deverá criar um novo array maior e realocar os valores do array antigo.

Mas pode ficar tranquilo que existem outras estruturas de dados que crescem dinamicamente, mas isso é assunto para uma aula futura ...
<h2>Conclusão</h2>
Como você pode perceber nesta aula, Vetores e Matrizes são, na verdade, a mesma coisa: <strong>ARRAY</strong>

A diferença é que o vetor é um <span style="text-decoration: underline;">array</span> de apenas 1 dimensão e a matriz é um <span style="text-decoration: underline;">array</span> de 2 (ou mais) dimensões.

Os arrays também são conhecidos por <strong>variáveis indexadas</strong>.

<strong>Array</strong> é uma das estruturas de dados mais simples que existe e uma das mais utilizadas também. Acho que todas as linguagens de programação têm <strong>arrays</strong>, pelo menos ainda não conheço uma linguagem que não tenha. Porém, os índices podem mudar dependendo da linguagem, algumas começam os índices do array com 1 e outras com 0, essa é a grande diferença que geralmente encontramos entre linguagens. No caso das linguagens que começam os arrays com o índice 0, o último elemento do array recebe o índice (&lt;tamanho do array&gt; – 1).

Gostou de conhecer os Arrays (Vetores e Matrizes)?
<h2>Tenho um desafio para você!</h2>
Nossa vida é cheia de desafios e eles são muito importantes para evoluirmos e ultrapassar os nossos limites.

Pensando na sua evolução, eu tenho um desafio para você resolver! Neste desafio você poderá utilizar tudo que aprendeu até agora. Inclusive a matriz que você aprendeu hoje!

Quero ver se você aprendeu mesmo!

O desafio é o seguinte:

<strong>Você deverá construir um jogo da velha.</strong>

Simples assim.

Não precisa ser um jogo muito elaborado. Vamos ver alguns requisitos.
<ol>
	<li>As jogadas do jogo da velha deverão ser armazenadas numa matriz (3x3) de caractere, chamada "tabuleiro", cada posição desta matriz armazenará um dos valores: " ", "_", "X" ou "O". Abaixo uma representação gráfica desta matriz.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;­1      2     3
1  ___|___|___
2  ___|___|___
3  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>A cada jogada o programa deverá mostrar na tela a situação atual do "tabuleiro". Por exemplo:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1      2     3
1  ___|___|___
2  ___|_X_|___
3  &nbsp;&nbsp;O&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;O</li>
	<li>Terão dois jogadores no jogo. O programa deve solicitar o nome dos dois jogadores antes de começar o jogo.</li>
	<li>A cada jogada o programa deverá perguntar separadamente as posições horizontal e vertical da jogada, nesta ordem.</li>
	<li>Quando um jogador vencer o programa deve apresentar imediatamente o vencedor e a situação do "tabuleiro".</li>
</ol>

Este exercício não é trivial, mas com um pouquinho de esforço e persistência tenho certeza que você consegue fazer esse jogo.
Vou dar dois dias para você fazer. Daqui a dois dias eu envio o meu algoritmo para o seu e-mail. A sua solução não precisa estar igual a minha, basta funcionar corretamente.

Até lá!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>356</wp:post_id>
		<wp:post_date><![CDATA[2015-09-29 14:01:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-29 14:01:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[aula-9-vetores-e-matrizes-arrays]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[page-lesson.php]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Aula 10/10 - Funções e Procedimentos</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/aula-10-funcoes-e-procedimentos/</link>
		<pubDate>Fri, 04 Dec 2015 21:02:32 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/?page_id=381</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Aula (10/10) Funções e Procedimentos</h1>
Olá! Tudo bem? Chegamos à aula #10 do <strong>minicurso GRÁTIS de lógica de programação</strong>!

Nesta aula vamos aprender uma forma de melhorar a sua programação. Utilizando <strong>funções</strong> e <strong>procedimentos</strong> nós podemos reaproveitar código, melhorar a leitura dos algoritmos e criar códigos mais limpos e legíveis.

Nesta aula vamos ver um pouquinho de geometria básica. Só pra relembrar um pouquinho a escola. Mas não se assuste, vai ser fácil.

<span style="text-decoration: underline;">Duração da aula: aproximadamente 25 minutos.</span>
<h2>O que são Funções e Procedimentos</h2>
A primeira coisa que você tem que entender é o que eu estou falando. Afinal, que raios são funções e procedimentos?

Bom, já adianto que você já usou procedimentos e nem percebeu!

Lembra quando você quis mostrar algum texto na tela? Você usou o procedimento <strong>ESCREVA</strong> e passou um texto como parâmetro, justamente o texto que você queria que aparecesse na tela.
<blockquote>ESCREVA("Olá mundo!")</blockquote>
Você saberia mostrar um texto na tela sem usar esse procedimento? Não né.

Outra pergunta: Você saberia fazer um algoritmo para calcular a raiz quadrada de um número? Reflita um pouquinho sobre a complexidade de tal algoritmo. E um algoritmo para gerar um número aleatório? Você saberia fazer?

Imprimir um texto na tela, raiz quadrada, geração de número aleatório, entre outros, são funções e procedimentos clássicos que um programador usa, mas não precisa implementar na unha. Pra quê re-inventar a roda??? Alguém já fez esses algoritmos e a gente apenas usa. O que precisamos é apenas solicitar a execução desses algoritmos dentro do nosso algoritmo.

Qual a diferença entre função e procedimento?

A única diferença entre uma função (function) e um procedimento (procedure) é que a função retorna um valor (por exemplo uma função que calcula raiz quadrada retorna um número) e o procedimento não retorna nada (por exemplo o procedimento escreva que já falei).

A figura abaixo exemplifica como acontece a utilização de uma função, o procedimento é a mesma coisa, menos na atribuição do resultado à variável "a".

<img class="aligncenter size-full wp-image-385" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/12/função.png" alt="função" width="503" height="332" />

<strong>Funções</strong> (e <strong>procedimentos</strong>) podem ou não receber parâmetros. No caso da função de raiz quadrada, é necessário passar como parâmetro o número que se deseja calcular a raiz, o procedimento <strong>ESCREVA</strong>, requer um texto como parâmetro para apresentar na tela do usuário.

Agora que já sabemos o que são e pra quê servem. Vamos para a prática!
<h2>Hora de praticar: Utilizando funções e procedimentos</h2>
Você lembra como calcular a hipotenusa de um triângulo retângulo?

Primeiro, vou te relembrar o que é um triângulo-retângulo. Um triângulo em que um dos ângulos tem 90º. Ou seja, dois lados do triângulo são perpendiculares entre si. Esses lados que formam o ângulo de 90º (ou ângulo reto) são chamados de "catetos". E o lado oposto ao angulo reto é a hipotenusa.

<img class="aligncenter wp-image-388 size-large" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/12/triangulo-retangulo-1024x670.gif" alt="triangulo-retangulo" width="660" height="432" />

Quando conhecemos o tamanho dos catetos nós conseguimos calcular o tamanho da hipotenusa. Estou falando do famoso <strong>teorema de Pitágoras</strong> que diz: <strong>A soma dos quadrados dos catetos equivale ao quadrado da hipotenusa</strong>. A imagem abaixo ilustra bem isso.

<img class="aligncenter size-full wp-image-391" src="https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/12/teorema-de-pitágoras.jpg" alt="teorema de pitágoras" width="471" height="446" />

Então para descobrir o valor da hipotenusa, temos que encontrar a raiz quadrada de ( b² + c² ).

Com base neste cálculo, vamos fazer um algoritmo que solicita ao usuário o valor dos dois catetos, calcula e apresenta na tela o valor da hipotenusa do triângulo retângulo. Para isso precisaremos usar a função RAIZQ do Visualg para calcular a raiz quadrada pra gente.
<pre class="lang:default decode:true ">algoritmo "Hipotenusa"
var
    a, b, c : REAL
inicio

      ESCREVA ("Digite o valor do primeiro cateto do triângulo retângulo: ")
      LEIA (b)
      ESCREVA ("Digite o valor do segundo cateto do triângulo retângulo: ")
      LEIA (c)

      a := RAIZQ ( b*b + c*c )//Cálculo da hipotenusa utilizando a FUNÇÃO RAIZQ,

      ESCREVA ("O valor da hipotenusa é: ", a)

fimalgoritmo</pre>
Observe que utilizamos a função RAIZQ para calcular a raiz quadrada do valor que passamos como parâmetro (valor entre parênteses) “b*b + c*c”, o valor retornado por essa função armazenamos na variável “a”.
<h2>Como criar as suas próprias funções e procedimentos</h2>
Você também pode criar as suas próprias funções e procedimentos. Entre as vantagens de criar as próprias funções e procedimentos cito duas, melhora a legibilidade do código, tirando complexidades de dentro do fluxo principal do seu algoritmo e remove repetição de código.

Abaixo a sintaxe para criação das suas próprias funções e procedimentos no Visualg.
<pre class="lang:default decode:true ">funcao &lt;nome-de-função&gt; [(&lt;seqüência-de-declarações-de-parâmetros&gt;)]: &lt;tipo-de-dado&gt;
// Seção de Declarações Internas
inicio
// Seção de Comandos
fimfuncao


procedimento &lt;nome-de-procedimento&gt; [(&lt;seqüência-de-declarações-de-parâmetros&gt;)]
// Seção de Declarações Internas
inicio
// Seção de Comandos
fimprocedimento</pre>
Vamos criar e usar uma função pra praticar. Vamos criar uma função que recebe um número inteiro e retorna o fatorial deste número.

Fatorial é a multiplicação de todos os números entre 1 e o número especificado.

Exemplo: Fatorial de 5 (ou 5!) corresponde a: 1 * 2 * 3 * 4 * 5 = 120

Então vamos ver como ficaria esta função.
<pre class="lang:default decode:true ">   funcao calculaFatorial(numero: inteiro): inteiro
   var
          fatorial: inteiro
          contador: inteiro
   inicio
         fatorial &lt;- 1
         ENQUANTO numero &gt; 1 FACA
                  fatorial &lt;- fatorial * numero
                  numero &lt;- numero - 1
         FIMENQUANTO
         retorne fatorial
   fimfuncao</pre>
O fluxo principal do nosso Algoritmo poderia ser assim.
<pre class="lang:default decode:true ">      ESCREVA("Informe o número para o cálculo do Fatorial: ")
      LEIA(numeroParaFatorial)
      ESCREVA("O fatorial de ", numeroParaFatorial, " é: ", calculaFatorial(numeroParaFatorial))</pre>
Esse é o algoritmo completo, com a função e o fluxo principal.
<pre class="lang:default decode:true ">algoritmo "Cacula Fatorial"
var

   numeroParaFatorial: inteiro
   
   funcao calculaFatorial(numero: inteiro): inteiro
   var
          fatorial: inteiro
          contador: inteiro
   inicio
         fatorial &lt;- 1
         ENQUANTO numero &gt; 1 FACA
                  fatorial &lt;- fatorial * numero
                  numero &lt;- numero - 1
         FIMENQUANTO
         retorne fatorial
   fimfuncao

inicio

      ESCREVA("Informe o número para o cálculo do Fatorial: ")
      LEIA(numeroParaFatorial)
      ESCREVA("O fatorial de ", numeroParaFatorial, " é: ", calculaFatorial(numeroParaFatorial))

fimalgoritmo</pre>
<h2>Resumindo</h2>
Vimos nesta aula que<strong> Funções</strong> e <strong>procedimentos</strong> são "subalgoritmos" que podem ser chamados dentro de outros algoritmos.

São utilizados com muita frequência em desenvolvimento de softwares. Existem vários benefícios como: evita duplicação de código quando precisamos executar a mesma operação várias vezes, deixa o entendimento do algoritmo mais intuitivo, pois tiramos a parte complexa do código do fluxo principal do algoritmo, etc.

<strong>Importante</strong>: em linguagens orientada a objeto como java, C++ e C#, funções e procedimentos são chamados de <strong>MÉTODO</strong>. Mais por uma questão de conceito de Orientação a Objetos, mas no fundo é a mesma coisa, podem receber parâmetros e retornam ou não um resultado.

Para finalizar, lembra do Jogo da Velha que fizemos na aula passada e eu te mandei o meu algoritmo (somente se você estiver inscrito neste minicurso gratuito). Pense como você poderia criar funções e procedimentos para melhorar ele. Amanhã eu vou mandar o mesmo algoritmo, só que utilizando funções e procedimentos para melhorar a legibilidade do algoritmo e tirar uma duplicação de código que tem nele. Mas tente fazer você mesmo, antes de receber o meu algoritmo.

Até lá!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>381</wp:post_id>
		<wp:post_date><![CDATA[2015-12-04 21:02:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-04 21:02:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[aula-10-funcoes-e-procedimentos]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>10</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[page-lesson.php]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>triangulo-retangulo</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/aula-10-funcoes-e-procedimentos/triangulo-retangulo/</link>
		<pubDate>Tue, 08 Dec 2015 13:17:57 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/12/triangulo-retangulo.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>388</wp:post_id>
		<wp:post_date><![CDATA[2015-12-08 13:17:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-08 13:17:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[triangulo-retangulo]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>381</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/12/triangulo-retangulo.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/triangulo-retangulo.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1044;s:6:"height";i:683;s:4:"file";s:31:"2015/12/triangulo-retangulo.gif";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"triangulo-retangulo-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:31:"triangulo-retangulo-300x196.gif";s:5:"width";i:300;s:6:"height";i:196;s:9:"mime-type";s:9:"image/gif";}s:5:"large";a:4:{s:4:"file";s:32:"triangulo-retangulo-1024x670.gif";s:5:"width";i:1024;s:6:"height";i:670;s:9:"mime-type";s:9:"image/gif";}s:14:"post-thumbnail";a:4:{s:4:"file";s:31:"triangulo-retangulo-825x510.gif";s:5:"width";i:825;s:6:"height";i:510;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>teorema de pitágoras</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/aula-10-funcoes-e-procedimentos/teorema-de-pitagoras/</link>
		<pubDate>Tue, 08 Dec 2015 13:47:48 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/12/teorema-de-pitágoras.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>391</wp:post_id>
		<wp:post_date><![CDATA[2015-12-08 13:47:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-08 13:47:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[teorema-de-pitagoras]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>381</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/12/teorema-de-pitágoras.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/teorema-de-pitágoras.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:471;s:6:"height";i:446;s:4:"file";s:33:"2015/12/teorema-de-pitágoras.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:33:"teorema-de-pitágoras-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:33:"teorema-de-pitágoras-300x284.jpg";s:5:"width";i:300;s:6:"height";i:284;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Por que TODOS deveriam aprender programação?</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/webnario-ao-vivo-por-que-todos-deveriam-aprender-programacao/</link>
		<pubDate>Thu, 10 Dec 2015 12:55:03 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/?page_id=419</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="headline" class="hero parallax-background top-waypoint video-section" data-type="parallax">
         <div class="container container-video">
            <div class="hero-inner">
                <div class="embed-responsive embed-responsive-16by9">
                   <iframe src="http://www.youtube.com/embed/Pcb-Om1EXkU?autoplay=1;rel=0&amp;showinfo=0" frameborder="0" allowfullscreen="yes"></iframe>
                </div>
            </div>
        </div>
</section>

<center>
<a target="_blank" href="http://bit.ly/1HVkbHt" class="btn btn-warning navbar-btn"><b style="font-size='20px';">Quero me inscrever no Minicurso GRATUITO de lógica de programação!</b></a>
</center>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>419</wp:post_id>
		<wp:post_date><![CDATA[2015-12-10 12:55:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-10 12:55:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[webnario-ao-vivo-por-que-todos-deveriam-aprender-programacao]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[page-hangout.php]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>resultado media</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-3-variaveis-constantes-operadores-e-tipos-de-dados/resultado-media/</link>
		<pubDate>Sat, 09 Jan 2016 16:05:00 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/resultado-media.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>460</wp:post_id>
		<wp:post_date><![CDATA[2016-01-09 16:05:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-09 16:05:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[resultado-media]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>135</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/wp-content/uploads/2015/05/resultado-media.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/resultado-media.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:681;s:6:"height";i:462;s:4:"file";s:27:"2015/05/resultado-media.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"resultado-media-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:27:"resultado-media-300x204.png";s:5:"width";i:300;s:6:"height";i:204;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hangout - Tira dúvidas e dicas para aprender programação</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/hangout-tira-duvidas-e-dicas-para-aprender-programacao/</link>
		<pubDate>Fri, 19 Feb 2016 08:51:25 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/?page_id=466</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align: center;">Infelizmente eu tive um problema com a minha internet e o hangout não aconteceu.</p>

<p style="text-align: center;">Decidi gravar videos explicando as dúvidas que recebi por e-mail.</p>

<p style="text-align: center;">Peço desculpas pelo ocorrido.</p>

<p style="text-align: center;">Forte abraço e bons estudos!</p>

<center>
Ainda não está participando do minicurso de lógica de programação?
<a target="_blank" href="http://bit.ly/1HVkbHt" class="btn btn-warning navbar-btn"><b style="font-size='20px';">Quero me inscrever no Minicurso GRATUITO de lógica de programação!</b></a>
</center>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>466</wp:post_id>
		<wp:post_date><![CDATA[2016-02-19 08:51:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-19 08:51:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[hangout-tira-duvidas-e-dicas-para-aprender-programacao]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[page-hangout.php]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Minicurso de Lógica de Programação Completo e Imediato!</title>
		<link>https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/minicurso-de-logica-de-programacao-completo-e-imediato/</link>
		<pubDate>Fri, 29 Apr 2016 15:23:13 +0000</pubDate>
		<dc:creator><![CDATA[gustavo.foa]]></dc:creator>
		<guid isPermaLink="false">https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/?page_id=487</guid>
		<description></description>
		<content:encoded><![CDATA[Você receberá IMEDIATAMENTE todo o conteúdo do minicurso gratuito de lógica de programação. Sem esperar os e-mails das próximas aulas.

Todo este conteúdo é distribuído gratuitamente no minicurso de lógica de programação que pode ser acessado aqui: https://dicasdeprogramacao.com.br/minicurso-logica-de-programacao/

Se você se cadastrar para receber o minicurso gratuito, você receberá o conteúdo distribuído em e-mails, páginas da Web (que podem sair do ar a qualquer momento), arquivos anexos e links. Os e-mails são enviados ao longo de 30 dias.

Adquirindo "Minicurso de Lógica de Programação Completo e Imediato!" pelo preço simbólico de R$ 9,90, você terá acesso a todo o conteúdo do minicurso de forma direta e organizada.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>487</wp:post_id>
		<wp:post_date><![CDATA[2016-04-29 15:23:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-29 15:23:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[minicurso-de-logica-de-programacao-completo-e-imediato]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
